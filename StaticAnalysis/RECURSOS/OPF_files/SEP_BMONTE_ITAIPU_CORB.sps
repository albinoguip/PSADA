SPS BMONTE

!------------!
! PARAMETROS !
!------------!

AUX      = PARAM(0.5)
ZERO     = PARAM(0.00)
ZP66     = PARAM(0.66666667)
UM       = PARAM(1.00)

MUM      = PARAM(-1.0)

BASE     = PARAM(100)

P1       = PARAM(1.000)
P2       = PARAM(2.000)
P3       = PARAM(3.000)
P4       = PARAM(4.000)
P5       = PARAM(5.000)
P6       = PARAM(6.000)
P7       = PARAM(7.000)
P8       = PARAM(8.000)
P9       = PARAM(9.000)
P10      = PARAM(10.00)
P11      = PARAM(11.00)
P12      = PARAM(12.00)
P200     = PARAM(200.0)
P400     = PARAM(400.0)
P600     = PARAM(600.0)
P1000     = PARAM(1000.0)
P1500    = PARAM(1500.0)
P1666    = PARAM(1666.65)
P3000    = PARAM(3000.0)
P4000    = PARAM(4000.0)

!----------------!
! UHE BELO MONTE !
!----------------!

!POTÊNCIA TOTAL GERADA
PTBMFpu  = TRAFO(6729,6730,1,PFLOW)
PTBMF    = MULT(PTBMFpu,BASE)
PTBMPR   = SAMPLE(PTBMF,100)

!NÚMERO DE MÁQUINAS SINCRONIZADAS
NGBM10_  = GEN(6729,10,NG)
NGBM10   = SAMPLE(NGBM10_,100)

NGBM20_  = GEN(6729,20,NG)
NGBM20   = SAMPLE(NGBM20_,100) 
 
NGBM30_  = GEN(6729,30,NG)
NGBM30   = SAMPLE(NGBM30_,100)
  
NGBM     = ADD(NGBM10,NGBM20,NGBM30)

NGBMPR   = SAMPLE(NGBM,100)
NGBMPL   = MAX(NGBMPR,UM)

!POTÊNCIA POR UNIDADE GERADORA
PMEDUG   = DIVIDE(PTBMPR,NGBMPL)
PMEDUL   = MAX(PMEDUG,UM) 

!-------------!
! UHE TUCURUÍ !
!-------------!

!NÚMERO DE MÁQUINAS SINCRONIZADAS
NGTUCAI  = GEN(6419,10,NG)
NGTUCA   = SAMPLE(NGTUCAI,100)

NGTUCBI  = GEN(6420,10,NG)
NGTUCB   = SAMPLE(NGTUCBI,100)

NGTUCCI  = GEN(6422,10,NG)
NGTUCC   = SAMPLE(NGTUCCI,100)

NGTUCDI  = GEN(6424,10,NG)
NGTUCD   = SAMPLE(NGTUCDI,100)

NGTUCEI  = GEN(6425,10,NG)
NGTUCE   = SAMPLE(NGTUCEI,100)

!NÚMERO TOTAL DE MÁQUINAS EM TUCURÍ

NGTU0    = ADD(NGTUCA,NGTUCB,NGTUCC,NGTUCD,NGTUCE)

!---------------------------!
! LTs 500kV XINGU - TUCURUÍ !
!---------------------------!

! STATUS
!C1
XT1      = TLINE(8101,6430,1,STATUS)                   
NXT1     = NOT(XT1)
SXT1     = SAMPLE(XT1,100) 
NSXT1    = NOT(SXT1)
LTXT1    = GT(SXT1,AUX)

!C2
XT2      = TLINE(8102,6430,2,STATUS)
NXT2     = NOT(XT2)                           
SXT2     = SAMPLE(XT2,100) 
NSXT2    = NOT(SXT2)
LTXT2    = GT(SXT2,AUX)

! DIREÇÃO DO FLUXO
!C1
F_XT1A   = TLINE(8101,6430,1,PFLOW)
F_LTXT1  = SAMPLE(F_XT1A,100)
F_XT1    = GE(F_LTXT1,ZERO)
F_TX1    = LE(F_LTXT1,ZERO)

!C2
F_XT2A   = TLINE(8102,6430,2,PFLOW)
F_LTXT2  = SAMPLE(F_XT2A,100)
F_XT2    = GE(F_LTXT2,ZERO)
F_TX2    = LE(F_LTXT2,ZERO)

!XINGU->TUCURUI
PDIRXT   = OR(F_XT1,F_XT2)

!TUCURUI->XINGU
PDIRTX   = OR(F_TX1,F_TX2)

! CAPACIDADE
CAPXT    = PARAM(2600.0)

! FLUXO PRÉ-FALTA
PXTpU    = ADD(F_LTXT1,F_LTXT2)
PXT      = MULT(PXTpu,BASE)
PXTPRE   = SAMPLE(PXT,100)
MPXTPRE  = MULT(PXTPRE,MUM)

! PERDA SIMPLES
PS1      = AND(LTXT1,NXT1)
NPS1     = NOT(PS1)

PS2      = AND(LTXT2,NXT2)
NPS2     = NOT(PS2)

CTG1XTA  = AND(NPS1,PS2)
CTG1XTB  = AND(PS1,NPS2)

CTG1XT   = OR(CTG1XTA,CTG1XTB)

! PERDA DUPLA
CTG2A    = AND(PS1,NSXT2)
CTG2B    = AND(PS2,NSXT1)
CTG2C    = AND(PS1,PS2)
!
CTG2XT   = OR(CTG2A,CTG2B,CTG2C)

! VERIFICAÇÃO DE AO MENOS UMA LT LIGADA
OP2XTN   = OR(XT1,XT2)
NOP2XTN  = NOT(OP2XTN)

! SOBRECARGA EM CASO DE PERDA SIMPLES
OVR_XT   = GT(PXTPRE,CAPXT)
OVR_TX   = GT(MPXTPRE,CAPXT)

!-----------------!
! LTs NORTE / SUL !
!-----------------!

!LT S.MESA2 - PEIXE2
F_SM2PX  = TLINE(299,7238,1,PFLOW)
S_SM2PX  = TLINE(299,7238,1,STATUS)
N_SM2PX = NOT(S_SM2PX)                           
FNS1     = MULT(F_SM2PX,MUM)                      
                                                  
!LT S.MESA - GURUPI C1/C2                         
F_SMGRP1 = TLINE(7236,7101,1,PFLOW)                
S_SMGRP1 = TLINE(7236,7101,1,STATUS)               
N_SMGRP1 = NOT(S_SMGRP1)
FNS2     = MULT(F_SMGRP1,MUM)

F_SMGRP2 = TLINE(7237,7103,2,PFLOW)
S_SMGRP2 = TLINE(7237,7103,2,STATUS)
N_SMGRP2 = NOT(S_SMGRP2)
FNS3     = MULT(F_SMGRP2,MUM)

!COMPOSIÇÃO DO FNS
FNSApu   = ADD(FNS1,FNS2,FNS3)
FNSA     = MULT(FNSApu,BASE)
FNS      = SAMPLE(FNSA,100)

!!LT MIRACEMA - COLINAS C1/C2/C3
!F_MCCO1  = TLINE(7200,7301,1,PFLOW)
!S_MCCO1  = TLINE(7200,7301,1,STATUS)
!N_MCCO1  = NOT(S_MCCO1)
!
!F_MCCO2  = TLINE(7200,7303,1,PFLOW)
!S_MCCO2  = TLINE(7200,7303,1,STATUS)
!N_MCCO2  = NOT(S_MCCO2)
!
!F_MCCO3  = TLINE(7200,7305,1,PFLOW)
!S_MCCO3  = TLINE(7200,7305,1,STATUS)
!N_MCCO3  = NOT(S_MCCO3)
!
!!LT GURUPI - MIRACEMA C1/C2/C3
!S_GURMC1  = TLINE(7100,7102,1,STATUS)
!N_GURMC1  = NOT(S_GURMC1)
!
!S_GURMC2  = TLINE(7100,7104,1,STATUS)
!N_GURMC2  = NOT(S_GURMC2)
!
!S_GURMC3  = TLINE(7100,7105,1,STATUS)
!N_GURMC3  = NOT(S_GURMC3)
!
!!LT IMPERATRIZ - MARABÁ C1/C2
!S_IMPMA1 = TLINE(5590,6400,1,STATUS)
!N_IMPMA1 = NOT(S_IMPMA1)
!
!S_IMPMA2 = TLINE(5590,6400,2,STATUS)
!N_IMPMA2 = NOT(S_IMPMA2)
!
!!COMPOSIÇÃO DO FMCCO
!F_MCCO   = ADD(F_MCCO1,F_MCCO2,F_MCCO3)
!FMCCO    = SAMPLE(F_MCCO,100)
!
!!PERDAS DUPLAS
!!MIRACEMA - COLINAS
!PD_MCCOA = AND(N_MCCO1,S_MCCO2,S_MCCO3)
!PD_MCCOB = AND(S_MCCO1,N_MCCO2,S_MCCO3)
!PD_MCCOC = AND(S_MCCO1,S_MCCO2,N_MCCO3)
!PD_MCCO  = OR(PD_MCCOA,PD_MCCOB,PD_MCCOC)
!
!!IMPERATRIZ - MARABÁ
!PD_IMPMB = AND(N_IMPMA1,N_IMPMA2)
!
!!GURUPI - MIRACEMA
!PD_GRMCA = AND(N_GURMC1,S_GURMC2,S_GURMC3)
!PD_GRMCB = AND(S_GURMC1,N_GURMC2,S_GURMC3)
!PD_GRMCC = AND(S_GURMC1,S_GURMC2,N_GURMC3)
!PD_GURMC = OR(PD_GRMCA,PD_GRMCB,PD_GRMCC)
!
!!GURUPI - SERRA DA MESA 
!PD_GRSMA = AND(N_SM2PX,S_SMGRP1,S_SMGRP2)
!PD_GRSMB = AND(S_SM2PX,N_SMGRP1,S_SMGRP2)
!PD_GRSMC = AND(S_SM2PX,S_SMGRP1,N_SMGRP2)
!PD_GSMPX = OR(PD_GRSMA,PD_GRSMB,PD_GRSMC)
!
!PDUP_NS   = OR(PD_MCCO,PD_IMPMB,PD_GURMC,PD_GSMPX)
!
!----------!
! BIPOLO 1 !
!----------!

!POTÊNCIA XINGU-ESTREITO
P1_XEI   = HVDC(8100,3010,1,PRET)
P2_XEI   = HVDC(8100,3010,2,PRET)
P1_XE    = SAMPLE(P1_XEI,100)
P2_XE    = SAMPLE(P2_XEI,100)

! DIREÇÃO DO FLUXO
F1_XE    = GT(P1_XE,ZERO)
F2_XE    = GT(P2_XE,ZERO)
DIR_XE   = OR(F1_XE,F2_XE) 

!POTÊNCIA ESTREITO-XINGU
P1_EXI   = HVDC(3010,8100,1,PRET)
P2_EXI   = HVDC(3010,8100,2,PRET)
P1_EX    = SAMPLE(P1_EXI,100)
P2_EX    = SAMPLE(P2_EXI,100)

! DIREÇÃO DO FLUXO
F1_EX    = GT(P1_EX,aux)        
F2_EX    = GT(P2_EX,aux)        
DIR_EX   = OR(F1_EX,F2_EX)  

! POTÊNCIA TRANSMITIDA
PDCPRE1  = ADD(P1_XE,P2_XE,P1_EX,P2_EX)
IDCBP1M  = ADD(P1_XEI,P2_XEI,P1_EXI,P2_EXI)
IDCBP1   = DIVIDE(IDCBP1M,P4000)

!STATUS DO BIPOLO XINGU-ESTREITO
P1_BL_XE = HVDC(8100,3010,1,BLOCK)
P2_BL_XE = HVDC(8100,3010,2,BLOCK)

P1_ST_XE = NOT(P1_BL_XE)
P2_ST_XE = NOT(P2_BL_XE)

!STATUS DO BIPOLO ESTREITO-XINGU
P1_BL_EX = HVDC(3010,8100,1,BLOCK)
P2_BL_EX = HVDC(3010,8100,2,BLOCK)

P1_ST_EX = NOT(P1_BL_EX)
P2_ST_EX = NOT(P2_BL_EX)

NPOLOSB1 = ADD(P1_ST_XE,P2_ST_XE,P1_ST_EX,P2_ST_EX)

! PERDA DO BIPOLO
!*** AVALIAR LÓGICA DA PERDA DE BIPOLO
CTGBP1   = AND(P1_BL_XE,P2_BL_XE)

! PERDA DO BIPOLO
P1OUT   = AND(P1_BL_XE,P1_BL_EX)
P1_OUT  = NOT(P1OUT)
P2OUT   = AND(P2_BL_XE,P2_BL_EX)
P2_OUT  = NOT(P2OUT)

!----------!
! BIPOLO 2 !
!----------!

!POTÊNCIA XINGU-TERMINAL RIO
P3_XTRI  = HVDC(8100,9605,3,PRET)
P4_XTRI  = HVDC(8100,9605,4,PRET)
P3_XTR   = SAMPLE(P3_XTRI,100)
P4_XTR   = SAMPLE(P4_XTRI,100)

! DIREÇÃO DO FLUXO
F3_XTR   = GT(P3_XTR,ZERO)
F4_XTR   = GT(P4_XTR,ZERO)
DIR_XTR  = OR(F3_XTR,F4_XTR) 

!POTÊNCIA TERMINAL RIO-XINGU
P3_TRXI  = HVDC(9605,8100,3,PRET)
P4_TRXI  = HVDC(9605,8100,4,PRET)
P3_TRX   = SAMPLE(P3_TRXI,100)
P4_TRX   = SAMPLE(P4_TRXI,100)

! DIREÇÃO DO FLUXO
F3_TRX   = GT(P3_TRX,aux)        
F4_TRX   = GT(P4_TRX,aux)        
DIR_TRX  = OR(F3_TRX,F4_TRX)  

! POTÊNCIA TRANSMITIDA
PDC2     = ADD(P3_XTRI,P4_XTRI,P3_TRXI,P4_TRXI)
PDCPRE2  = SAMPLE(PDC2,100)

!STATUS DO BIPOLO XINGU-TERMINAL RIO
P3_B_XTR = HVDC(8100,9605,3,BLOCK)
P4_B_XTR = HVDC(8100,9605,4,BLOCK)

P3_S_XTR = NOT(P3_B_XTR)
P4_S_XTR = NOT(P4_B_XTR)

!STATUS DO BIPOLO TERMINAL RIO-XINGU
P3_B_TRX = HVDC(9605,8100,3,BLOCK)
P4_B_TRX = HVDC(9605,8100,4,BLOCK)

P3_S_TRX = NOT(P3_B_TRX)
P4_S_TRX = NOT(P4_B_TRX)

NPOLOSB2 = ADD(P3_S_XTR,P4_S_XTR,P3_S_TRX,P4_S_TRX)

! PERDA DO BIPOLO
!*** AVALIAR LÓGICA DA PERDA DE BIPOLO
CTGBP2   = AND(P3_B_XTR,P4_B_XTR)

N_EXP    = OR(DIR_XE,DIR_XTR)
SE_EXP   = OR(DIR_EX,DIR_TRX)

!PERDA DE UM DOS BIPOLOS OU ÚLTIMO POLO
P_B1_B2  = OR(CTGBP1,CTGBP2)

!-----------------------------!
!-- RUN UP ALLOCATION LOGIC --! 
!-----------------------------!

PMAXNE   = PARAM(2660)
PMAXSE   = PARAM(2175)
PMAX_LD  = SEL(PMAXSE,PMAXNE,N_EXP)

PMAX_CD  = PARAM(3000)

! BIPOLO 1 

! MARGEM COM SOBRECARGA DE CURTA DURAÇÃO

RUPP1CD  = SUB(PMAX_CD,P1_XE)
RUPP1CDL = MIN(P1000,RUPP1CD)
RUP_P1CD = MULT(RUPP1CDL,P1_OUT)

RUPP2CD  = SUB(PMAX_CD,P2_XE)
RUPP2CDL = MIN(P1000,RUPP2CD)
RUP_P2CD = MULT(RUPP2CDL,P2_OUT)

RUPB1_CD = ADD(RUP_P1CD,RUP_P2CD)

! MARGEM COM SOBRECARGA DE LONGA DURAÇÃO 
RUPP1LD  = SUB(PMAX_LD,P1_XE)
RUPP1LDL = MIN(P1000,RUPP1LD)
RUP_P1LD = MULT(RUPP1LD,P1_OUT)

RUPP2LD  = SUB(PMAX_LD,P2_XE)
RUPP2LDL = MIN(P1000,RUPP2LD)
RUP_P2LD = MULT(RUPP2LD,P2_OUT)

RUPB1_LD = ADD(RUP_P1LD,RUP_P2LD)


! BIPOLO 2
!XINGU - TERMINAL RIO
P3_XTR66 = MULT(P3_XTR,ZP66)
P4_XTR66 = MULT(P4_XTR,ZP66)
P3_XTRF  = SUB(P1666,P3_XTR66)
P4_XTRF  = SUB(P1666,P4_XTR66)

RUP_P3   = MIN(P3_XTRF,P1500)
RUP_P4   = MIN(P4_XTRF,P1500)
RUPB2_CD = ADD(RUP_P3,RUP_P4)

RUPB2_LD = MULT(RUPB2_CD,UM)

! MARGEM DOS DOS DOIS BIPOLOS
M_RUP_CD  = ADD(RUPB1_CD,RUPB2_CD)
M_RUP_LD  = ADD(RUPB1_LD,RUPB2_LD)



!-------------------------------!
!-- RUN BACK ALLOCATION LOGIC --! 
!-------------------------------!

! BIPOLO 1
RBK_P1   = SUB(P200,P1_XE)
RBK_P2   = SUB(P200,P2_XE)
RBK_B1   = ADD(RBK_P1,RBK_P2)

! BIPOLO 2
RBK_P3   = SUB(P200,P3_XTR)
RBK_P4   = SUB(P200,P4_XTR)
RBK_B2   = ADD(RBK_P3,RBK_P4)

! MARGEM DOS DOS DOIS BIPOLOS
M_RBK    = ADD(RBK_B1,RBK_B2)



!******************************!
!***                        ***!  
!** LOGICA 1 - PERDA SIMPLES **! 
!***                        ***!  
!******************************!

!***********************************************!
!***              LOGICA 1.A.1               ***!
!*** NORTE EXPORTADOR / FLUXO XINGU->TUCURUI ***!
!***********************************************!

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA      
EXL1A1   = AND(CTG1XT,N_EXP,PDIRXT,OVR_XT)  

!CÁLCULO DO VALOR DE RUNUP 
RU1A1    = SUB(PXTPRE,CAPXT)

!VERIFICAÇÃO DA MARGEM
X0211    = GT(M_RUP_LD,RU1A1)

!SELEÇÃO DO VALOR
SEL_1A1  = SEL(M_RUP_LD,RU1A1,X0211)

DRU1A1   = MULT(SEL_1A1,EXL1A1)

!CONDIÇÃO PARA CORTE DE GERAÇÃO      
SH_L1    = LT(M_RUP_LD,RU1A1)

!CÁLCULO DO NÚMERO DE MÁQUINAS PARA O CORTE EM CASO DE FALTA DE MARGEM DO BIPOLO "OVERTRIP"
X0213    = SUB(RU1A1,M_RUP_LD)
X0215    = DIVIDE(X0213,PMEDUL)
X0216    = TRUNC(X0215)
X0217    = SUB(X0215,X0216)
X0218    = GT(X0217,ZERO)
TBM1A1_  = ADD(X0216,X0218)
TBM1A1   = MIN(TBM1A1_,P7)

!COMANDO PARA CORTE DE MÁQUINAS
SHDL1A1  = AND(EXL1A1,SH_L1)
BMSHD_L1 = GENSHD2(SHDL1A1,6729,10,TBM1A1,0.15)

NMQL1G20 = SUB(TBM1A1,NGBM10)
SH1BMG20 = GT(NMQL1G20,ZERO)
SL1A1_20 = AND(SHDL1A1,SH1BMG20)
BM_L1_20 = GENSHD2(SL1A1_20,6729,20,NMQL1G20,0.15)

NMQL1G30 = SUB(NMQL1G20,NGBM20)
SH1BMG30 = GT(NMQL1G30,ZERO)
SL1A1_30 = AND(SL1A1_20,SH1BMG30)
BM_L1_30 = GENSHD2(SL1A1_30,6729,30,NMQL1G30,0.15)


!***********************************************!
!***             LÓGICA 1.A.2                ***!
!*** NORTE EXPORTADOR / FLUXO TUCURUI->XINGU ***!
!***********************************************!

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA
EXL1A2   = AND(CTG1XT,N_EXP,PDIRTX,OVR_TX)    

!CÁLCULO DO VALOR DE RUNUP
X0236    = ADD(PXTPRE,CAPXT)

!VERIFICAÇÃO DA MARGEM
X0239    = GE(M_RBK,X0236)

!SELEÇÃO DO VALOR
SEL_1A2  = SEL(X0236,M_RBK,X0239)
DRB1A2   = MULT(SEL_1A2,EXL1A2)



!*************************************************!
!***               LÓGICA 1.B.1                ***!
!*** SUDESTE EXPORTADOR / FLUXO XINGU->TUCURUI ***!
!*************************************************!

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA
EXL1B1   = AND(CTG1XT,SE_EXP,PDIRXT,OVR_XT)        

!CÁLCULO DO VALOR DE RUNBACK
X0256    = SUB(CAPXT,PXTPRE)

!VERIFICAÇÃO DA MARGEM
X0259    = LE(M_RBK,X0256)

!SELEÇÃO DO VALOR
SEL_1B1  = SEL(M_RBK,X0256,X0259)
DRB1B1   = MULT(SEL_1B1,EXL1B1)


!****************************!
!***                      ***!  
!** LOGICA 2 - PERDA DUPLA **! 
!***                      ***!  
!****************************!

!***********************************************!
!***             LÓGICA 2.A.1                ***!
!*** NORTE EXPORTADOR / FLUXO XINGU->TUCURUI ***!
!***********************************************!

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA
EXL2A1   = AND(CTG2XT,N_EXP,PDIRXT)

!VERIFICAÇÃO DA MARGEM
X3011    = GE(M_RUP_LD,PXTPRE)

!SELEÇÃO DO VALOR
SEL_2A1  = SEL(M_RUP_LD,PXTPRE,X3011)
DRU2A1   = MULT(SEL_2A1,EXL2A1)

!CÁLCULO DO NÚMERO DE MÁQUINAS PARA O CORTE EM CASO DE FALTA DE MARGEM DO BIPOLO "UNDERTRIP"
X0314    = SUB(PXTPRE,M_RUP_LD)
X0316    = DIVIDE(X0314,PMEDUL)
TBM2A1_  = TRUNC(X0316)
TBM2A1__ = GE(TBM2A1_,UM)
TBM2A1   = MIN(TBM2A1_,P7)

!COMANDO PARA CORTE DE MÁQUINAS
SH_L2    = LT(M_RUP_LD,PXTPRE)
SHDL2A1  = AND(EXL2A1,SH_L2,TBM2A1__)
BMSHD_L2 = GENSHD2(SHDL2A1,6729,10,TBM2A1,0.15)

NMQL2G20 = SUB(TBM2A1,NGBM10)
SH2BMG20 = GT(NMQL2G20,ZERO)
SL2A1_20 = AND(SHDL2A1,SH2BMG20)
BM_L2_20 = GENSHD2(SL2A1_20,6729,20,NMQL2G20,0.15)

NMQL2G30 = SUB(NMQL2G20,NGBM20)
SH2BMG30 = GT(NMQL2G30,ZERO)
SL2A1_30 = AND(SL2A1_20,SH1BMG30)
BM_L2_30 = GENSHD2(SL2A1_30,6729,30,NMQL2G30,0.15)



!***********************************************!
!***             LÓGICA 2.A.2                ***!
!*** NORTE EXPORTADOR / FLUXO TUCURUI->XINGU ***!
!***********************************************!

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA
EXL2A2   = AND(CTG2XT,N_EXP,PDIRTX)

!VERIFICA SE A MARGEM DE RUNBACK ATENDE O FLUXO TUCURUI-XINGU
X0339    = LT(M_RBK,PXTPRE)
L2A22BP  = AND(X0339,EXL2A2)
DRB2A2   = MULT(PXTPRE,L2A22BP)

!CASO A MARGEM DE RUNBACK SEJA INSUFICIENTE

!VERIFICA SE O BLOQUEIO DO BP2 + A MARGEM DE RUNBACK DO BP1 ATENDEM O FLUXO TUCURUI-XINGU
X0336    = SUB(RBK_B1,PDCPRE2)     
X0338    = LT(X0336,PXTPRE)

NL2A22BP = NOT(L2A22BP)
!SINAL DE COMANDO PARA O BLOQUEIO DO BP2 E RUNBACK DO BP1
L2A21BP  = AND(X0338,NL2A22BP,EXL2A2)     

!MONTANTE DE RUNBACK PARA O BP1
RB2A2B1  = ADD(PDCPRE2,PXTPRE)
DRB2A2B1 = MULT(RB2A2B1,L2A21BP)

!CASO A MARGEM DE RUNBACK + BLOQUEIO DO BIPOLO 2 SEJA INSUFICIENTE
NL2A21BP = NOT(L2A21BP)

!SINAL DE COMANDO PARA BLOQUEIO DO BP1 E BP2
L2A20BP  = AND(NL2A22BP,NL2A21BP,EXL2A2)

!SINAL PARA INIBIR A LOGICA3
INBL3_2A = OR(L2A21BP,L2A20BP)

!CORTE DE MÁQUINAS EM TUCURUÍ
X0351    = GT(MPXTPRE,P400)
X0352    = GT(MPXTPRE,P600)
X0353    = NOT(X0352)

!SINAL PARA O CORTE DE MÁQUINAS EM TUCURUI EM FUNCAO DA LOGICA 2.A.2
!CONDIÇÃO PARA 2 MÁQUINAS
X0354     = AND(X0351,X0353,EXL2A2)

!CONDIÇÃO PARA 4 MÁQUINAS
X0355    = AND(X0352,EXL2A2)



!*************************************************!
!***               LÓGICA 2.B.1                ***!
!*** SUDESTE EXPORTADOR / FLUXO XINGU->TUCURUI ***!
!*************************************************!

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA
EXL2B1   = AND(CTG2XT,SE_EXP,PDIRXT)

!VERIFICA SE A MARGEM DE RUNBACK ATENDE O FLUXO XINGU-TUCURUI
X0369    = LT(M_RBK,MPXTPRE)
L2B12BP  = AND(X0369,EXL2B1)
DRB2B1   = MULT(MPXTPRE,L2B12BP)

!CASO A MARGEM DE RUNBACK SEJA INSUFICIENTE

!VERIFICA SE O BLOQUEIO DO BP2 + A MARGEM DE RUNBACK DO BP1 ATENDEM O FLUXO XINGU-TUCURUI
X0366    = SUB(RBK_B1,PDCPRE2)     
X0368    = LT(X0366,MPXTPRE)

NL2B12BP = NOT(L2B12BP)
!SINAL DE COMANDO PARA O BLOQUEIO DO BP2 E RUNBACK DO BP1
L2B11BP  = AND(X0338,NL2B12BP,EXL2B1)     

!MONTANTE DE RUNBACK PARA O BP1
RB2B1B1  = SUB(PXTPRE,PDCPRE2)
DRB2B1B1 = MULT(RB2B1B1,L2B11BP)

!CASO A MARGEM DE RUNBACK + BLOQUEIO DO BIPOLO 2 SEJA INSUFICIENTE
NL2B11BP = NOT(L2B11BP)

!SINAL DE COMANDO PARA BLOQUEIO DO BP1 E BP2
L2B10BP  = AND(NL2B12BP,NL2B11BP,EXL2B1)

!SINAL PARA INIBIR A LOGICA3
INBL3_2B = OR(L2B11BP,L2B10BP)



!*************************************************!
!***               LÓGICA 2.B.2                ***!
!*** SUDESTE EXPORTADOR / FLUXO TUCURUI-XINGU  ***!
!*************************************************!

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA
EXL2B2   = AND(CTG2XT,SE_EXP,PDIRTX)

DRU2B2_  = MULT(PXTPRE,MUM)
DRU2B2   = MULT(DRU2B2_,EXL2B2)

!****************************************!
!*** Abertura do Trafo Xingu 500/230  ***!
!****************************************!

TR_XINGU = OPEN(CTG2XT,8100,43970,1,0.250) 

!*****************************!
!***                       ***!  
!** LOGICA 3 - PERDA BIPOLO **! 
!***                       ***!  
!*****************************!

!ATUAÇÃO DAS LÓGICAS 2.A.2 OU 2.B.1 
INBL3    = OR(INBL3_2A,INBL3_2B)
INHIBT3  = NOT(INBL3)

!CONDIÇÃO PARA ATUAÇÃO DA LÓGICA
EXL3     = AND(P_B1_B2,N_EXP,INHIBT3)

!COMANDO PARA BLOQUEI DA PSS

BLOCKPSS = PRTBLOCK(EXL3,28)

!LOST DC POWER CALCULATION   
X0542_   = SUB(PDCPRE1,RUPB2_CD)
X0542    = MULT(X0542_,CTGBP1)

X0544_   = SUB(PDCPRE2,RUPB1_CD)
X0544    = MULT(X0544_,CTGBP2)

LOSTDC   = ADD(X0542,X0544)


!ORDEM DE RUNUP PARA O BIPOLO REMANESCENTE
DRU3B1_  = MULT(PDCPRE2,CTGBP2)
DRU3B1   = MIN(RUPB1_CD,DRU3B1_)

DRU3B2_  = MULT(PDCPRE1,CTGBP1)
DRU3B2   = MIN(RUPB2_CD,DRU3B2_)

!CORTE DE GERAÇÃO COM A LINHA XINGU-TUCURUI

!FNS <= 1500 MW
CL1A     = LE(FNS,P1500)
!
CL1B     = LFPP(LOSTDC,0,0,600,0,601,540,1000,540,1001,1080,1200,1080,1201,1620,1600,1620,1601,2160,2000,2160,2001,2700,2400,2700,2401,3240,2800,3240,2801,3780,5000,3780)
CL1OUT   = MULT(CL1A,CL1B)

!1500 MW < FNS <= 3000 MW 
CL2A     = LT(P1500,FNS)
CL2B     = LE(FNS,P3000)
CL2C     = AND(CL2A,CL2B)
!
CL2D     = LFPP(LOSTDC,-100,540,0,540,1,1080,100,1080,101,1620,250,1620,251,2160,600,2160,601,2700,800,2700,801,3240,1000,3240,1001,3780,5000,3780 )
CL2OUT   = MULT(CL2C,CL2D)

!FNS > 3000 MW
CL3A     = GT(FNS,P3000)
!
CL3B     = LFPP(LOSTDC,-100,540,0,540,1,1080,50,1080,51,1620,100,1620,101,2160,400,2160,401,3240,800,3240,801,3780,5000,3780)
CL3OUT   = MULT(CL3A,CL3B)

MWDROP1  = ADD(CL1OUT,CL2OUT,CL3OUT)

X0571    = DIVIDE(MWDROP1,PMEDUL)
X0572    = TRUNC(X0571)
X0573    = SUB(X0571,X0572)
X0574    = GT(X0573,ZERO)
X0576    = ADD(X0572,X0574)
X0579    = MULT(X0576,OP2XTN)

!CORTE DE GERAÇÃO SEM A LINHA XINGU-TUCURUI
X0577    = DIVIDE(LOSTDC,PMEDUL)
X0578    = TRUNC(X0577)
X0580    = MULT(X0578,NOP2XTN) 

TBM_L3_  = ADD(X0579,X0580)
TBM_L3   = MIN(TBM_L3_,P7)

BMSHD_L3 = GENSHD2(EXL3T,6729,10,TBM_L3,0.150)  

NMQL3G20 = SUB(TBM_L3,NGBM10)
SH3BMG20 = GT(NMQL3G20,ZERO)
SL3_20   = AND(EXL3T,SH3BMG20)
BM_L3_20 = GENSHD2(SL3_20,6729,20,NMQL3G20,0.150)

NMQL3G30 = SUB(NMQL3G20,NGBM20)
SH3BMG30 = GT(NMQL3G30,ZERO)
SL3_30   = AND(SL3_20,SH3BMG30)
BM_L3_30 = GENSHD2(SL3_30,6729,30,NMQL3G30,0.150)

!CORTE DE GERAÇÃO EM TUCURUÍ
X0582    = SUB(MWDROP1,PTBMPR)
X0583    = GT(X0582,ZERO)

!CORTA 2 MÁQUINAS
X585     = LE(X0582,P600)
X0585    = AND(X585,X0583,EXL3T)

!CORTA 4 MÁQUINAS
X587    = GT(X0582,P600)
X0587   = AND(X587,X0583,EXL3T)

!**************************************!
!** COMANDOS PARA ALTERAÇÃO DE ORDEM **! 
!**************************************!


!MONTANTE DE RUNUP DAS LOGICAS 1A1 2A1 2B2
DPORUP   = ADD(DRU1A1,DRU2A1,DRU2B2)

!REPARTIÇÃO DE POTÊNCIA ENTRE OS BIPOLOS PARA RUNUP (MARGEM DO BIPOLO / MARGEM TOTAL)
FA_UP_B1 = DIVIDE(RUPB1_LD,M_RUP_LD)
FA_UP_B2 = DIVIDE(RUPB2_LD,M_RUP_LD)

!RUNUP DO BIPOLO 1
RNUPBP1  = MULT(DPORUP,FA_UP_B1)
RNUP_BP1 = ADD(RNUPBP1,DRU3B1)

!RUNUP DO BIPOLO 2
RNUPBP2 = MULT(DPORUP,FA_UP_B2)
RNUP_BP2 = ADD(RNUPBP2,DRU3B2)


!MONTANTE DE RUNBACK DAS LOGICAS 1A2 1B1 2A2 2B1
DPORBC   = ADD(DRB1A2,DRB1B1,DRB2A2,DRB2B1)


!REPARTIÇÃO DE POTÊNCIA ENTRE OS BIPOLOS PARA RUNBACK (MARGEM DO BIPOLO / MARGEM TOTAL)
FA_BK_B1 = DIVIDE(RBK_B1,M_RBK)
FA_BK_B2 = DIVIDE(RBK_B2,M_RBK)

!RUNBACK DO BIPOLO 1
RNB_BP1  = MULT(DPORBC,FA_BK_B1)
RNBK_BP1 = ADD(RNB_BP1,DRB2A2B1,DRB2B1B1)

!RUNBACK DO BIPOLO 2
RNBK_BP2 = MULT(DPORBC,FA_BK_B2)

DPOB1    = ADD(RNUP_BP1,RNBK_BP1)
DPOP1    = DIVIDE(DPOB1,NPOLOSB1)
DPOB2    = ADD(RNUP_BP2,RNBK_BP2)
DPOP2    = DIVIDE(DPOB2,NPOLOSB2)

EXL1     = OR(EXL1A1,EXL1A2,EXL1B1)
EXL2     = OR(EXL2A1,EXL2A2,EXL2B1,EXL2B2)

EXL3T    = TIMER(EXL3,0.100)
EXDPO    = OR(EXL1,EXL2,EXL3T)

EXPON_P1  = DCPCHNG2(EXDPO,8100,3010,1,DPOP1,0.07)
EXPON_P2  = DCPCHNG2(EXDPO,8100,3010,2,DPOP1,0.07)
EXPON_P3  = DCPCHNG2(EXDPO,8100,9605,3,DPOP2,0.07)
EXPON_P4  = DCPCHNG2(EXDPO,8100,9605,4,DPOP2,0.07)
EXPOS_P1  = DCPCHNG2(EXDPO,3010,8100,1,DPOP1,0.07)
EXPOS_P2  = DCPCHNG2(EXDPO,3010,8100,2,DPOP1,0.07)
EXPOS_P3  = DCPCHNG2(EXDPO,9605,8100,3,DPOP2,0.07)
EXPOS_P4  = DCPCHNG2(EXDPO,9605,8100,4,DPOP2,0.07)

!**************************************!
!** COMANDOS PARA BLOQUEIO DE BIPOLO **! 
!**************************************!

!LOGICA 2A2 E 2B1

!BLOQUEIO DO BIPOLO 1
BLB1     = OR(L2A20BP,L2B10BP)
BLKP1B1  = DCBLOCK(BLB1,8100,3010,1,0.07) 
BLKP2B1  = DCBLOCK(BLB1,8100,3010,2,0.07) 

                                               
!BLOQUEIO DO BIPOLO 2
BLB2     = OR(L2A21BP,L2A20BP,L2B11BP,L2B10BP)
BLKP3B2  = DCBLOCK(BLB2,8100,9605,3,0.07)
BLKP4B2  = DCBLOCK(BLB2,8100,9605,4,0.07)

!************************************!
!** COMANDOS PARA CORTE DE MÁQUINA **! 
!************************************!

TUC2     = OR(X0354,X0585)
TUCSHD2  = MULT(TUC2,P2)

TUC4     = OR(X0355,X0587)
TUCSHD4  = MULT(TUC4,P4)

TUCSHD   = ADD(TUCSHD2,TUCSHD4)

X5850    = SUB(NGTU0,P5)
TUEXC5   = MAX(ZERO,X5850)

TUCSHDL  = MIN(TUCSHD,TUEXC5)

TCSH1    = SUB(NGTUCA,TUCSHDL)
TCSH2    = GE(TCSH1,ZERO)

TUC24    = OR(TUC2,TUC4)
                                                 
PROT23B  = PRTBLOCK(tuc24,28)                                                 
                         
TUCSHEDA = GENSHD2(TUC24,6419,10,TUCSHDL,0.150)

NMQSHDTB = SUB(TUCSHDL,NGTUCA)
SHDBTUC  = GT(NMQSHDTB,ZERO)
TUC24B   = AND(TUC24,SHDBTUC)

TUCSHEDB = GENSHD2(TUC24B,6420,10,NMQSHDTB,0.150)

NMQSHDTC = SUB(NMQSHDTB,NGTUCB)
SHDCTUC  = GT(NMQSHDTC,ZERO)
TUC24C   = AND(TUC24B,SHDCTUC)

TUCSHEDC = GENSHD2(TUC24C,6422,10,NMQSHDTC,0.150)

!***********************!
!** LÓGICA DE FILTROS **! 
!***********************!


!---------!
!- XINGU -!
!---------!

VBX      = BUS(8100,VOLT)
VBXF     = LPASS1(VBX,0.02)

!Número inicial de Filtros e Bancos de Capacitor

!Bipolo 1
NA0X1     = SHUNTG(8100,20,NBON)
NB0X1     = SHUNTG(8100,30,NBON)
NC0X1     = SHUNTG(8100,40,NBON)
NT0X1     = ADD(NA0X1,NB0X1,NC0X1)

!Bipolo2
NA0X2     = SHUNTG(8100,50,NBON)
NB0X2     = SHUNTG(8100,60,NBON)
NC0X2     = SHUNTG(8100,70,NBON)
NT0X2     = ADD(NA0X2,NB0X2,NC0X2) 


!***************************!
!** LÓGICA DE FILTROS BP1 **! 
!***************************!

!----------------------------!
!Harmonic Performance Control!
!----------------------------!

!@@@ INCLUIR TABELA PARA OPERÇÃO MONOPOLAR
MNHPCX   = LFPP(IDCBP1,0,2,0.299,2,0.3,3,0.369,3,0.37,4,0.719,4,0.72,5,0.839,5,0.84,6,0.949,6,0.95,7,0.999,7,1.00,8,1.049,8,1.05,9,1.5,9)


!--------------------!
!DESCONEXÃO DE FILTRO! 
!--------------------!

!--------------------------------!
!Voltage Limitation Control - VLC!
!--------------------------------!

!@@@ ISOLATE 0

ISOL0X   = PARAM(1.104)
VHIGH0X  = GT(VBXF,ISOL0X)
VISO0X   = TIMER(VHIGH0X,10.0)

ISOL1X   = PARAM(1.15)
VHIGH1X  = GT(VBXF,ISOL1X)
VISO1X   = TIMER(VHIGH1X,2.0)

ISOL2X   = PARAM(1.20)
VHIGH2X  = GT(VBXF,ISOL2X)
VISO2X   = TIMER(VHIGH2X,0.310)

ISOL3X   = PARAM(1.27)
VHIGH3X  = GT(VBXF,ISOL3X)
VISO3X   = TIMER(VHIGH3X,0.210)

!--------------------------------!
!AC Voltage Control - Uac-Control!
!--------------------------------!

URMXPUX  = PARAM(1.10)
UACHGHX  = GT(VBXF,URMXPUX)
UACISOX  = TIMER(UACHGHX,4.5)

!----------------------!
!Inibição de Desconexão!
!----------------------!

ISOILEX  = PARAM(0.97)
NINHISX  = GT(VBXF,ISOILEX)
                                

!----------------------------------!
!Condição para Desconexão Xingu BP1!
!----------------------------------!

ISOVLCX  = OR(VISO0X,VISO1X,VISO2X,VISO3X)

!-------------------------------------------!
!Tempo de Retardo entre desconexões Xingu BP1!
!-------------------------------------------!

TRISUCX  = PARAM(4.5)  
TRISV1X  = PARAM(0.500)  
TRISV23X = PARAM(0.150)   
TRTIS1X  = SEL(TRISUCX,TRISV1X,VISO1X)
!        
VISO23X  = OR(VHIGH2X,VHIGH3X)  
TRETISX = SEL(TRTIS1X,TRISV23X,VISO23X)

!------------------------------------!
!Comandos para desconexão do Grupo 40!
!------------------------------------!

!Primeiro Banco
NC1X1    = SUB(NC0X1,ZERO) 
ISONC1X  = GT(NC0X1,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH1X   = GT(NT0X1,MNHPCX)
ISOUC1X  = AND(UACISOX,ISOH1X,NINHISX)
ISOP1X   = OR(ISOVLCX,ISOUC1X)      
!
!Condição para atuação
ISOC1X   = AND(ISONC1X,ISOP1X)
ISOLC1X  = SHUNT(ISOC1X,8100,200,0.120,REMOVE)
NT1X1    = SUB(NT0X1,ISOLC1X)
!fim


!Segundo Banco
NC2X1    = SUB(NC1X1,ISOLC1X)
ISONC2X  = GT(NC2X1,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH2X   = GT(NT1X1,MNHPCX)
ISOUC2X  = AND(UACISOX,ISOH2X,NINHISX)
ISOP2X   = OR(ISOVLCX,ISOUC2X)      
!
ISOC2X   = AND(ISOLC1X,ISONC2X,ISOP2X)
ISOC2TX  = TIMER2(ISOC2X,TRETISX)
ISOLC2X  = SHUNT(ISOC2TX,8100,200,0.00,REMOVE)
NCFX1    = SUB(NC2X1,ISOLC2X)
NT2X1    = SUB(NT1X1,ISOLC2X)
!fim


!------------------------------------------------------------!
!Comandos para desconexão do Grupo 30 e Grupo 20 Intercalados!
!------------------------------------------------------------!

!Primeiro Filtro B
ISONB1X = GT(NB0X1,P1)
ISOCTX  = EQ(NCFX1,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH3X   = GT(NT2X1,MNHPCX)
ISOUC3X  = AND(UACISOX,ISOH3X,NINHISX)
ISOP3X   = OR(ISOVLCX,ISOUC3X)      
!          
ISOB1X   = AND(ISONB1X,ISOCTX,ISOP3X)    
ISOCTXt  = sample(ISOCTX,100)
teste2    = sel(TRETISX,zero,ISOCTXt)             
ISOB1TX  = TIMER2(ISOB1X,teste2)                  
ISOLB1X  = SHUNT(ISOB1TX,8100,180,0.00,REMOVE)     
NB1X1    = SUB(NB0X1,ISOLB1X)                          
NT3X1    = SUB(NT2X1,ISOLB1X)

!Primeiro Filtro A 
ISONA1X  = GT(NA0X1,P1)
!Comando para iniciar o corte no Grupo 20 caso não haja filtro disponível no 30
ISA1B0X  = EQ(NB0X1,P1)

!Numero de Filtro maior que o mínimo
ISOH4X   = GT(NT3X1,MNHPCX)
ISOUC4X  = AND(UACISOX,ISOH4X,NINHISX)
ISOP4X   = OR(ISOVLCX,ISOUC4X)      
!          
ISOA1X1  = AND(ISOLB1X,ISONA1X,ISOCTX,ISOP4X) 
ISOA1X2  = AND(ISA1B0X,ISOCTX,ISOP4X)
ISOA1X   = OR(ISOA1X1,ISOA1X2)
ISOA1TX  = TIMER2(ISOA1X,TRETISX)
ISOLA1X  = SHUNT(ISOA1TX,8100,220,0.00,REMOVE)
NA1X1    = SUB(NA0X1,ISOLA1X)
NT4X1    = SUB(NT3X1,ISOLA1X)

!Segundo Filtro B
ISONB2X = GT(NB1X1,P1)
!
!Numero de Filtro maior que o mínimo
ISOH5X   = GT(NT4X1,MNHPCX)
ISOUC5X  = AND(UACISOX,ISOH5X,NINHISX)
ISOP5X   = OR(ISOVLCX,ISOUC5X)      
!          
ISOB2X   = AND(ISOLA1X,ISONB2X,ISOP5X)             
ISOB2TX  = TIMER2(ISOB2X,TRETISX)                  
ISOLB2X  = SHUNT(ISOB2TX,8100,180,0.00,REMOVE)     
NB2X1    = SUB(NB1X1,ISOLB2X)                          
NT5X1    = SUB(NT4X1,ISOLB2X)

!Segundo Filtro A
ISONA2X = GT(NA1X1,P1)
!
!Numero de Filtro maior que o mínimo
ISOH6X   = GT(NT5X1,MNHPCX)
ISOUC6X  = AND(UACISOX,ISOH6X,NINHISX)
ISOP6X   = OR(ISOVLCX,ISOUC6X)      
!          
ISOA2X   = AND(ISOLB2X,ISONA2X,ISOP6X)             
ISOA2TX  = TIMER2(ISOA2X,TRETISX)                  
ISOLA2X  = SHUNT(ISOA2TX,8100,220,0.00,REMOVE)     
NA2X1    = SUB(NA1X1,ISOLA2X)                          
NT6X1    = SUB(NT5X1,ISOLA2X)

!Terceiro Filtro B
ISONB3X = GT(NB2X1,ZERO)
!
ISOB3X   = AND(ISOVLCX,ISOLA2X,ISONB3X,CTGBP1)             
ISOB3TX  = TIMER2(ISOB3X,TRETISX)                  
ISOLB3X  = SHUNT(ISOB3TX,8100,180,0.00,REMOVE)     
NB3X     = SUB(NB2X1,ISOLB3X)                          
NT7X1    = SUB(NT5X1,ISOLB3X)

!Terceiro Filtro A
ISONA3X = GT(NA2X1,ZERO)
!
ISOA3X   = AND(ISOVLCX,ISOLB3X,ISONA3X,CTGBP1)             
ISOA3TX  = TIMER2(ISOA3X,TRETISX)                  
ISOLA3X  = SHUNT(ISOA3TX,8100,220,0.00,REMOVE)     
NA3X     = SUB(NA2X1,ISOLA3X)                          
NT8X1    = SUB(NT7X1,ISOLA3X)




!------------------!
!CONEXÃO DE FILTROS!
!------------------!

!---------------------!
!Controle de Subtensão!
!---------------------!

CONLX    = PARAM(0.93)
VLOWX    = LE(VBXF,CONLX)
VCONX    = TIMER(VLOWX,5.0)

!------------------!
!Controle de Tensão!
!------------------!

URMNPUX  = PARAM(1.0)
UACLOWX  = LT(VBXF,URMNPUX)
UACCONX  = TIMER(UACLOWX,4.5)

!----------------------------------!
!Harmonic Performance Control - HPC!
!----------------------------------!

!HHIGHX   = GT(MNHPCX,ZERO)
!HPCCONX  = TIMER(HHIGHX,1.5)

!-------------------!
!Inibição de Conexão!
!-------------------!

CONILEX  = PARAM(1.10)
NINHCX   = LE(VBXF,CONILEX)

!-------------------------------!
!Condição para Conexão Xingu BP1!
!-------------------------------!

CONEAX   = OR(UACCONX,VCONX)
CONEX    = AND(CONEAX,NINHCX)

!----------------------------------------!
!Tempo de Retardo entre Conexões Xingu BP1!
!----------------------------------------!

TRCNUACX = PARAM(4.5)  
TRCNVLWX = PARAM(5.0)   
!
TRETCNX  = SEL(TRCNUACX,TRCNVLWX,UACCONX)

!---------------------------------------------------------!
!Comandos para Conexão do Grupo 20 e Grupo 30 Intercalados!
!---------------------------------------------------------!

!Primeiro Filtro A
!
CNA1X    = LT(NA0X1,P3)
CONA1X   = AND(CNA1X,CONEX,NINHCX)

!Numero de Filtro menor que o mínimo
CNHA1X   = GT(MNHPCX,NT0X1)
CONHA1X  = AND(CNHA1X,CNA1X,NINHCX)
CONHA1TX = TIMER(CONHA1X,1.5)
!
CONPA1X  = OR(CONA1X,CONHA1TX) 
CONEA1X  = SHUNT(CONPA1X,8100,220,0.120,ADD)
NAC1X    = ADD(NA0X1,CONEA1X)
NTCON1X  = ADD(NT0X1,CONEA1X)

!Primeiro Filtro B
!
CNB1X    = LT(NB0X1,P3)
CONB1X   = AND(CONEA1X,CNB1X,CONEX,NINHCX)

!Iniciar o conexão no Grupo 30 caso não haja filtro disponível no 20
CNB1A3X  = EQ(NA0X1,P3)
CONB1A3X = AND(CNB1A3X,CNB1X,CONEX,NINHCX)

CONPB1X  = OR(CONB1X,CONB1A3X)      

!Tempo 120 ms caso seja o primeiro filtro a ser conectado
TDELB1   = PARAM(0.120)
TRTB1A3X = SEL(TRETCNX,TDELB1,CNB1A3X)
CONB1TX  = TIMER2(CONPB1X,TRTB1A3X) 

!Numero de Filtro menor que o mínimo
CNHB1X   = GT(MNHPCX,NTCON1X)
CONHB1X  = AND(CNHB1X,CNB1X,CONHA1TX,NINHCX)
!Inicia no 30 por indisponibilidade no 20
CONHB1AX = AND(CNHB1X,CNB1A3X,CNB1X,NINHCX)

COHB1X   = OR(CONHB1X,CONHB1AX)
CONHB1TX = TIMER(COHB1X,1.5)
!Condição para atuação
CNPB1X    = OR(CONB1TX,CONHB1TX)
CONEB1X  = SHUNT(CNPB1X,8100,180,0.00,ADD)
NBC1X    = ADD(NB0X1,CONEB1X)
NTCON2X  = ADD(NTCON1X,CONEB1X)

!Segundo Filtro A
CNA2X    = LT(NAC1X,P3)
CONA2X   = AND(CNA2X,CONEX,CONEB1X,NINHCX)
CONA2TX  = TIMER2(CONA2X,TRETCNX)

!Numero de Filtro menor que o mínimo
CNHA2X   = GT(MNHPCX,NTCON2X)
CONHA2X  = AND(CNHA2X,CNA2X,CONEB1X,NINHCX)
CONHA2TX = TIMER(CONHA2X,1.5)
!
CONPA2X  = OR(CONA2TX,CONHA2TX) 
CONEA2X  = SHUNT(CONPA2X,8100,220,0.120,ADD)
NAC2X    = ADD(NAC1X,CONEA2X)
NTCON3X  = ADD(NTCON2X,CONEA2X)   
!

!Segundo Filtro B
CNB2X    = LT(NBC1X,P3)
CONB2X   = AND(CNB2X,CONEX,CONEA2X,NINHCX)
CONB2TX  = TIMER2(CONB2X,TRETCNX)

!Numero de Filtro menor que o mínimo
CNHB2X   = GT(MNHPCX,NTCON3X)
CONHB2X  = AND(CNHB2X,CNB2X,CONEA2X,NINHCX)
CONHB2TX = TIMER(CONHB2X,1.5)
!
CONPB2X  = OR(CONB2TX,CONHB2TX) 
CONEB2X  = SHUNT(CONPB2X,8100,180,0.120,ADD)
NBC2X    = ADD(NBC1X,CONEB2X)
NTCON4X  = ADD(NTCON3X,CONEB2X)   
!
!---------------------------------!
!Comandos para Conexão do Grupo 40!
!---------------------------------!

!Verifca se todos os filtro A e B foram Conectados
CONCAX   = EQ(NAC2X,P3)
CONCBX   = EQ(NBC2X,P3) 
CONCABX  = AND(CONCAX,CONCBX)

!Primeiro Banco
CNC1X    = LT(NC0X1,P2) 
CONC1X   = AND(CONCABX,CONEX,NINHCX) 

NCNA1X   = NOT(CNA1X)
NCNB1X   = NOT(CNB1X)
NAB0X1   = AND(NCNA1X,NCNA1X)

SELTRCX1 = SEL(TRETCNX,ZERO,NAB0X1)

CONC1TX  = TIMER2(CONC1X,SELTRCX1)    

!Numero de Filtro menor que o mínimo  
CNHC1X   = GT(MNHPCX,NTCON4X)         
CONHC1X  = AND(CNHC1X,CNC1X,CONEB2X,NINHCX)  
CONHC1TX = TIMER(CONHC1X,1.5)         

CONPC1X  = OR(CONC1TX,CONHC1TX) 
CONEC1X  = SHUNT(CONPC1X,8100,200,0.00,ADD)
NCC1X    = ADD(NC0X1,CONEC1X)
NTCON5X  = ADD(NTCON4X,CONEC1X)   


!Segundo Banco
CNC2X    = LT(NCC1X,P2) 
CONC2X   = AND(CNC2X,CONEX,CONEC1X,NINHCX)  
CONC2TX  = TIMER2(CONC2X,TRETCNX)    

!Numero de Filtro menor que o mínimo  
CNHC2X   = GT(MNHPCX,NTCON5X)         
CONHC2X  = AND(CNHC2X,CNC2X,CONEC1X,NINHCX)  
CONHC2TX = TIMER(CONHC2X,1.5)         

CONPC2X  = OR(CONC2TX,CONHC2TX) 
CONEC2X  = SHUNT(CONPC2X,8100,200,0.00,ADD)
NCC2X    = ADD(NCC1X,CONEC2X)
NTCON6X  = ADD(NTCON5X,CONEC2X)
!

!----------!
! ESTREITO !
!----------!

VBE      = BUS(3010,VOLT)
VBEF     = LPASS1(VBE,0.02)

!-----------------------------------------------!
!Número inicial de Filtros e Bancos de Capacitor!
!-----------------------------------------------!

NA0E     = SHUNTG(3010,10,NBON)
NB0E     = SHUNTG(3010,20,NBON)
NC0E     = SHUNTG(3010,30,NBON)
NT0E     = ADD(NA0E,NB0E,NC0E)

!----------------------------!
!Harmonic Performance Control!
!----------------------------!

!@@@ TABELA PARA OPERÇÃO MONOPOLAR     

MNHPCE1  = LFPP(IDCBP1,0,2,0.299,2,0.3,3,0.349,3,0.35,4,0.869,4,0.87,5,0.949,5,0.95,6,1.049,6,1.05,7,1.099,7,1.1,8,1.249,8,1.25,9,1.329,9)
IDC133   = PARAM(1.33)
MNHPCE2  = GE(IDCBP1,IDC133)
MNHPCE   = SEL(MNHPCE1,P10,MNHPCE2)

!--------------------!
!DESCONEXÃO DE FILTRO! 
!--------------------!

!--------------------------------!
!Voltage Limitation Control - VLC!
!--------------------------------!

ISOL0E   = PARAM(1.104)
VHIGH0E  = GT(VBEF,ISOL0E)
VISO0E   = TIMER(VHIGH0E,10.0)

ISOL1E   = PARAM(1.15)
VHIGH1E  = GT(VBEF,ISOL1E)
VISO1E   = TIMER(VHIGH1E,2.0)

ISOL2E   = PARAM(1.20)
VHIGH2E  = GT(VBEF,ISOL2E)
VISO2E   = TIMER(VHIGH2E,0.310)

ISOL3E   = PARAM(1.27)
VHIGH3E  = GT(VBEF,ISOL3E)
VISO3E   = TIMER(VHIGH3E,0.210)

!--------------------------------!
!AC Voltage Control - Uac-Control!
!--------------------------------!

URMXPUE  = PARAM(1.10)
UACHGHE  = GT(VBEF,URMXPUE)
UACISOE  = TIMER(UACHGHE,4.5)

!Comparação com número de filtros do HPC é feita nos comandos de filtro

!----------------------!
!Inibição de Desconexão!
!----------------------!

ISOILE   = PARAM(0.962)
NINHISE  = GT(VBEF,ISOILE)

!---------------------------------!
!Condição para Desconexão Estreito!
!---------------------------------!

ISOVLCE  = OR(VISO0E,VISO1E,VISO2E,VISO3E)

!------------------------------------------!
!Tempo de Retardo entre desconexões Estreito!
!------------------------------------------!

TRISUCE = PARAM(4.5)  
TRIS1E  = PARAM(0.500)  
TRIS23E = PARAM(0.150)   
TRTIS1E = SEL(TRISUCE,TRIS1E,VHIGH1E)
!
VISO23E = OR(VHIGH2E,VHIGH3E)  
TRETISE = SEL(TRTIS1E,TRIS23E,VISO23E)

!------------------------------------!
!Comandos para desconexão do Grupo 30!
!------------------------------------!

!Primeiro Banco
NC1E    = SUB(NC0E,ZERO)
ISONC1E = GT(NC0E,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH1E  = GT(NT0E,MNHPCE)
ISOUC1E = AND(UACISOE,ISOH1E,NINHISE)
ISOP1E  = OR(ISOVLCE,ISOUC1E)      
!
!Condição para atuação
ISOC1E  = AND(ISONC1E,ISOP1E)
ISOLC1E = SHUNT(ISOC1E,3010,275,0.120,REMOVE)
NT1E    = SUB(NT0E,ISOLC1E)

!Segundo Banco
NC2E     = SUB(NC1E,ISOLC1E)
ISONC2E  = GT(NC2E,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH2E   = GT(NT1E,MNHPCE)
ISOUC2E  = AND(UACISOE,ISOH2E,NINHISE)
ISOP2E   = OR(ISOVLCE,ISOUC2E)      
!
ISOC2E   = AND(ISOLC1E,ISONC2E,ISOP2E)
ISOC2TE  = TIMER2(ISOC2E,TRETISE)
ISOLC2E  = SHUNT(ISOC2TE,3010,275,0.00,REMOVE)
NT2E    = SUB(NT1E,ISOLC2E)

!Terceiro Banco
NC3E     = SUB(NC2E,ISOLC2E)
ISONC3E  = GT(NC3E,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH3E   = GT(NT2E,MNHPCE)
ISOUC3E  = AND(UACISOE,ISOH3E,NINHISE)
ISOP3E   = OR(ISOVLCE,ISOUC3E)      
!
ISOC3E   = AND(ISOLC2E,ISONC3E,ISOP3E)
ISOC3TE  = TIMER2(ISOC3E,TRETISE)
ISOLC3E  = SHUNT(ISOC3TE,3010,275,0.00,REMOVE)
NT3E    = SUB(NT2E,ISOLC3E)

!Quarto Banco
NC4E     = SUB(NC3E,ISOLC3E)
ISONC4E  = GT(NC4E,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH4E   = GT(NT3E,MNHPCE)
ISOUC4E  = AND(UACISOE,ISOH4E,NINHISE)
ISOP4E   = OR(ISOVLCE,ISOUC4E)      
!
ISOC4E   = AND(ISOLC3E,ISONC4E,ISOP4E)
ISOC4TE  = TIMER2(ISOC4E,TRETISE)
ISOLC4E  = SHUNT(ISOC4TE,3010,275,0.00,REMOVE)
NT4E    = SUB(NT3E,ISOLC4E)

!Quinto Banco
NC5E     = SUB(NC4E,ISOLC4E)
ISONC5E  = GT(NC5E,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH5E   = GT(NT4E,MNHPCE)
ISOUC5E  = AND(UACISOE,ISOH5E,NINHISE)
ISOP5E   = OR(ISOVLCE,ISOUC5E)      
!
ISOC5E   = AND(ISOLC4E,ISONC5E,ISOP5E)
ISOC5TE  = TIMER2(ISOC5E,TRETISE)
ISOLC5E  = SHUNT(ISOC5TE,3010,275,0.00,REMOVE)
NT5E    = SUB(NT4E,ISOLC5E)

!Sexto Banco
NC6E     = SUB(NC5E,ISOLC5E)
ISONC6E  = GT(NC6E,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH6E   = GT(NT5E,MNHPCE)
ISOUC6E  = AND(UACISOE,ISOH6E,NINHISE)
ISOP6E   = OR(ISOVLCE,ISOUC6E)      
!
ISOC6E   = AND(ISOLC5E,ISONC6E,ISOP6E)
ISOC6TE  = TIMER2(ISOC6E,TRETISE)
ISOLC6E  = SHUNT(ISOC6TE,3010,275,0.00,REMOVE)
NT6E     = SUB(NT5E,ISOLC6E)
NCFE     = SUB(NC6E,ISOLC6E)

!------------------------------------------------------------!
!Comandos para desconexão do Grupo 20 e Grupo 10 Intercalados!
!------------------------------------------------------------!

!Primeiro Filtro B
ISONB1E = GT(NB0E,P1)
ISOCTE  = EQ(NCFE,ZERO)
!
!Numero de Filtro maior que o mínimo
ISOH7E   = GT(NT6E,MNHPCE)
ISOUC7E  = AND(UACISOE,ISOH7E,NINHISE)
ISOP7E   = OR(ISOVLCE,ISOUC7E)      
!          
ISOB1E   = AND(ISONB1E,ISOCTE,ISOP7E)             
test3    = sel(ZERO,TRETISE,isolc6e)                  
ISOB1TE  = TIMER2(ISOB1E,test3)
ISOLB1E  = SHUNT(ISOB1TE,3010,180,0.0,REMOVE)     
NB1E    = SUB(NB0E,ISOLB1E)                          
NT7E    = SUB(NT6E,ISOLB1E)

!Primeiro Filtro A 
ISONA1E  = GT(NA0E,P1)
!Comando para iniciar o corte no Grupo 20 caso não haja filtro disponível no 30
ISA1B0E  = EQ(NB0E,P1)

!Numero de Filtro maior que o mínimo
ISOH8E   = GT(NT7E,MNHPCE)
ISOUC8E  = AND(UACISOE,ISOH8E,NINHISE)
ISOP8E   = OR(ISOVLCE,ISOUC8E)      
!          
ISOA1E1  = AND(ISOLB1E,ISONA1E,ISOCTE,ISOP8E) 
ISOA1E2  = AND(ISA1B0E,ISOCTE,ISOP8E)
ISOA1E   = OR(ISOA1E1,ISOA1E2)
ISOA1TE  = TIMER2(ISOA1E,TRETISE)
ISOLA1E  = SHUNT(ISOA1TE,3010,220,0.00,REMOVE)
NA1E    = SUB(NA0E,ISOLA1E)
NT8E    = SUB(NT7E,ISOLA1E)

!Segundo Filtro B
ISONB2E = GT(NB1E,P1)
!
!Numero de Filtro maior que o mínimo
ISOH9E   = GT(NT8E,MNHPCE)
ISOUC9E  = AND(UACISOE,ISOH9E,NINHISE)
ISOP9E   = OR(ISOVLCE,ISOUC9E)      
!          
ISOB2E   = AND(ISOLA1E,ISONB2E,ISOP9E)             
ISOB2TE  = TIMER2(ISOB2E,TRETISE)                  
ISOLB2E  = SHUNT(ISOB2TE,3010,180,0.00,REMOVE)     
NB2E     = SUB(NB1E,ISOLB2E)                          
NT9E    = SUB(NT8E,ISOLB2E)

!Segundo Filtro A
ISONA2E = GT(NA1E,P1)
!
!Numero de Filtro maior que o mínimo
ISOH10E   = GT(NT9E,MNHPCE)
ISOUC10E  = AND(UACISOE,ISOH10E,NINHISE)
ISOP10E   = OR(ISOVLCE,ISOUC10E)      
!          
ISOA2E   = AND(ISOLB2E,ISONA2E,ISOP6E)             
ISOA2TE  = TIMER2(ISOA2E,TRETISE)                  
ISOLA2E  = SHUNT(ISOA2TE,3010,220,0.00,REMOVE)     
NA2E     = SUB(NA1E,ISOLA2E)                          
NT10E    = SUB(NT9E,ISOLA2E)

!Terceiro Filtro B
ISONB3E = GT(NB2E,ZERO)
!          
ISOB3E   = AND(ISOVLCE,ISOLA2E,ISONB3E,CTGBP1)             
ISOB3TE  = TIMER2(ISOB3E,TRETISE)                  
ISOLB3E  = SHUNT(ISOB3TE,3010,180,0.00,REMOVE)     
NB3E     = SUB(NB2E,ISOLB3E)                          
NT11E    = SUB(NT10E,ISOLB3E)

!Terceiro Filtro A
ISONA3E = GT(NA2E,ZERO)
!
ISOA3E   = AND(ISOVLCE,ISOLB3E,ISONA3E,CTGBP1)             
ISOA3TE  = TIMER2(ISOA3E,TRETISE)                  
ISOLA3E  = SHUNT(ISOA3TE,3010,220,0.00,REMOVE)     
NA3E     = SUB(NA2E,ISOLA3E)                          
NT12E    = SUB(NT11E,ISOLA3E)
     
!------------------!
!CONEXÃO DE FILTROS!
!------------------!

!---------------------!
!Controle de Subtensão!
!---------------------!

CONLE    = PARAM(0.93)
VLOWE    = LE(VBEF,CONLE)
VCONE    = TIMER(VLOWE,5.0)

!------------------!
!Controle de Tensão!
!------------------!

URMNPUE  = PARAM(1.0)
UACLOWE  = LT(VBEF,URMNPUE)
UACCONE  = TIMER(UACLOWE,4.5)

!----------------------------------!
!Harmonic Performance Control - HPC!
!----------------------------------!

!HHIGHE   = GT(MNHPCE,zero)
!HPCCONE  = TIMER(HHIGHE,1.5)

!-------------------!
!Inibição de Conexão!
!-------------------!

CONILE   = PARAM(1.10)
NINHICE  = LE(VBEF,CONILE)

!------------------------------!
!Condição para Conexão Estreito!
!------------------------------!

CONE     = OR(UACCONE,VCONE)
CONEE    = AND(CONE,NINHICE)

!---------------------------------------!
!Tempo de Retardo entre Conexões Estreito!
!---------------------------------------!

TRCNUACE = PARAM(4.5)  
TRCNVLWE = PARAM(5.0)   
!
TRETCNE = SEL(TRCNUACE,TRCNVLWE,UACCONE)

!---------------------------------------------------------!
!Comandos para Conexão do Grupo 10 e Grupo 20 Intercalados!
!---------------------------------------------------------!

!Primeiro Filtro A
!
CNA1E    = LT(NA0E,P3)
CONA1E   = AND(CNA1E,CONEE)

!Numero de Filtro menor que o mínimo
CNHA1E   = GT(MNHPCE,NT0E)
CONHA1E  = AND(CNHA1E,CNA1E)
CONHA1TE = TIMER(CONHA1E,1.5)
!
CONPA1E  = OR(CONA1E,CONHA1TE) 
CONEA1E  = SHUNT(CONPA1E,3010,220,0.120,ADD)
NAC1E    = ADD(NA0E,CONEA1E)
NTCON1E  = ADD(NT0E,CONEA1E)

!Primeiro Filtro B
!
CNB1E    = LT(NB0E,P3)
CONB1E   = AND(CONEA1E,CNB1E,CONEE)

!Iniciar o conexão no Grupo 30 caso não haja filtro disponível no 20
CNB1A3E  = EQ(NA0E,P3)
CONB1A3E = AND(CNB1A3E,CNB1E,CONEE)

CONPB1E  = OR(CONB1E,CONB1A3E)      

!Tempo 120 ms caso seja o primeiro filtro a ser conectado
TDELB1E  = PARAM(0.120)
TRTB1A3E = SEL(TRETCNE,TDELB1E,CNB1A3E)
CONB1TE  = TIMER2(CONPB1E,TRTB1A3E) 

!Numero de Filtro menor que o mínimo
CNHB1E   = GT(MNHPCE,NTCON1E)
CONHB1E  = AND(CNHB1E,CNB1E,CONHA1TE)
!Inicia no 30 por indisponibilidade no 20
CONHB1AE = AND(CNHB1E,CNB1A3E,CNB1E)

COHB1E   = OR(CONHB1E,CONHB1AE)
CONHB1TE = TIMER(COHB1E,1.5)
!Condição para atuação
CNPB1E    = OR(CONB1TE,CONHB1TE)
CONEB1E  = SHUNT(CNPB1E,3010,180,0.00,ADD)
NBC1E    = ADD(NB0E,CONEB1E)
NTCON2E  = ADD(NTCON1E,CONEB1E)
!
!Segundo Filtro A
CNA2E    = LT(NAC1E,P3)
CONA2E   = AND(CNA2E,CONEE,CONEB1E)
CONA2TE  = TIMER2(CONA2E,TRETCNE)

!Numero de Filtro menor que o mínimo
CNHA2E   = GT(MNHPCE,NTCON2E)
CONHA2E  = AND(CNHA2E,CNA2E,CONEB1E)
CONHA2TE = TIMER(CONHA2E,1.5)
!
CONPA2E  = OR(CONA2TE,CONHA2TE) 
CONEA2E  = SHUNT(CONPA2E,3010,220,0.120,ADD)
NAC2E    = ADD(NAC1E,CONEA2E)
NTCON3E  = ADD(NTCON2E,CONEA2E)   
!

!Segundo Filtro B
CNB2E    = LT(NBC1E,P3)
CONB2E   = AND(CNB2E,CONEE,CONEA2E)
CONB2TE  = TIMER2(CONB2E,TRETCNE)

!Numero de Filtro menor que o mínimo
CNHB2E   = GT(MNHPCE,NTCON3E)
CONHB2E  = AND(CNHB2E,CNB2E,CONEA2E)
CONHB2TE = TIMER(CONHB2E,1.5)
!
CONPB2E  = OR(CONB2TE,CONHB2TE) 
CONEB2E  = SHUNT(CONPB2E,3010,180,0.120,ADD)
NBC2E    = ADD(NBC1E,CONEB2E)
NTCON4E  = ADD(NTCON3E,CONEB2E)   

!---------------------------------!
!Comandos para Conexão do Grupo 30!
!---------------------------------!

!Verifca se todos os filtro A e B foram Conectados
CONCAE   = EQ(NAC2E,P3)
CONCBE   = EQ(NBC2E,P3) 
CONCABE  = AND(CONCAE,CONCBE)

!Primeiro Banco
CNC1E    = LT(NC0E,P6) 
CONC1E   = AND(CONCABE,CNC1E,CONEE,NINHICE) 

NCNA1E   = NOT(CNA1E)
NCNB1E   = NOT(CNB1E)
NAB0E    = AND(NCNA1E,NCNA1E)

SELTRCE  = SEL(TRETCNE,ZERO,NAB0E)
 
CONC1TE  = TIMER2(CONC1E,SELTRCE)    

!Numero de Filtro menor que o mínimo  
CNHC1E   = GT(MNHPCE,NTCON4E)         
CONHC1E  = AND(CNHC1E,CNC1E,CONEB2E,NINHICE)  
CONHC1TE = TIMER(CONHC1E,1.5)         

CONPC1E  = OR(CONC1TE,CONHC1TE) 
CONEC1E  = SHUNT(CONPC1E,3010,275,0.00,ADD)
NCC1E    = ADD(NC0E,CONEC1E)
NTCON5E  = ADD(NTCON4E,CONEC1E)   


!Segundo Banco
CNC2E    = LT(NCC1E,P6) 
CONC2E   = AND(CNC2E,CONEE,CONEC1E,NINHICE)  
CONC2TE  = TIMER2(CONC2E,TRETCNE)    

!Numero de Filtro menor que o mínimo  
CNHC2E   = GT(MNHPCE,NTCON5E)         
CONHC2E  = AND(CNHC2E,CNC2E,CONEC1E,NINHICE)  
CONHC2TE = TIMER(CONHC2E,1.5)         

CONPC2E  = OR(CONC2TE,CONHC2TE) 
CONEC2E  = SHUNT(CONPC2E,3010,275,0.00,ADD)
NCC2E    = ADD(NCC1E,CONEC2E)
NTCON6E  = ADD(NTCON5E,CONEC2E)
!

!Terceiro Banco
CNC3E    = LT(NCC2E,P6) 
CONC3E   = AND(CNC3E,CONEE,CONEC2E,NINHICE)  
CONC3TE  = TIMER2(CONC3E,TRETCNE)    

!Numero de Filtro menor que o mínimo  
CNHC3E   = GT(MNHPCE,NTCON6E)         
CONHC3E  = AND(CNHC3E,CNC3E,CONEC2E,NINHICE)  
CONHC3TE = TIMER(CONHC3E,1.5)         

CONPC3E  = OR(CONC3TE,CONHC3TE) 
CONEC3E  = SHUNT(CONPC3E,3010,275,0.00,ADD)
NCC3E    = ADD(NCC2E,CONEC3E)
NTCON7E  = ADD(NTCON6E,CONEC3E)
!

!Quarto Banco
CNC4E    = LT(NCC3E,P6) 
CONC4E   = AND(CNC4E,CONEE,CONEC3E,NINHICE)  
CONC4TE  = TIMER2(CONC4E,TRETCNE)    

!Numero de Filtro menor que o mínimo  
CNHC4E   = GT(MNHPCE,NTCON7E)         
CONHC4E  = AND(CNHC4E,CNC4E,CONEC3E,NINHICE)  
CONHC4TE = TIMER(CONHC4E,1.5)         

CONPC4E  = OR(CONC4TE,CONHC4TE) 
CONEC4E  = SHUNT(CONPC4E,3010,275,0.00,ADD)
NCC4E    = ADD(NCC3E,CONEC4E)
NTCON8E  = ADD(NTCON7E,CONEC4E)
!

!Quinto Banco
CNC5E    = LT(NCC4E,P6) 
CONC5E   = AND(CNC5E,CONEE,CONEC4E,NINHICE)  
CONC5TE  = TIMER2(CONC5E,TRETCNE)    

!Numero de Filtro menor que o mínimo  
CNHC5E   = GT(MNHPCE,NTCON8E)         
CONHC5E  = AND(CNHC5E,CNC5E,CONEC4E,NINHICE)  
CONHC5TE = TIMER(CONHC5E,1.5)         

CONPC5E  = OR(CONC5TE,CONHC5TE) 
CONEC5E  = SHUNT(CONPC5E,3010,275,0.00,ADD)
NCC5E    = ADD(NCC4E,CONEC5E)
NTCON9E  = ADD(NTCON8E,CONEC5E)
!

!Sexto Banco
CNC6E    = LT(NCC5E,P6) 
CONC6E   = AND(CNC6E,CONEE,CONEC5E,NINHICE)  
CONC6TE  = TIMER2(CONC6E,TRETCNE)    

!Numero de Filtro menor que o mínimo  
CNHC6E   = GT(MNHPCE,NTCON9E)         
CONHC6E  = AND(CNHC6E,CNC6E,CONEC5E,NINHICE)  
CONHC6TE = TIMER(CONHC6E,1.5)         

CONPC6E  = OR(CONC6TE,CONHC6TE) 
CONEC6E  = SHUNT(CONPC6E,3010,275,0.00,ADD)
NCC6E    = ADD(NCC5E,CONEC6E)
NTCON10E = ADD(NTCON9E,CONEC6E)


!
!***************************!
!** LÓGICA DE FILTROS BP2 **! 
!***************************!

!------!
!ABSMIN!
!------!
!@@@ Possui Banda Morta de 50MW
!Xingu Retificador
ABSMN_XR = LFPP(PDC2,400,1,401,2,800,2,801,3,1200,3,1201,4,2800,4,2801,5,4000,5,4001,6,5000,6,5001,7,6000,7)


!T.Rio Inversor
ABSMN_TI = LFPP(PDC2,400,2,988,2,989,3,2143,3,2144,4,3265,4,3266,5,3991,5,3992,6,4518,6,4519,7,4861,7,4862,8,5028,8,5028,9,6000,9)


!T.Rio Retificador 
ABSMN_TR = LFPP(PDC2,400,2,1000,2,1001,3,2200,3,2201,4,2600,4,2601,5,4000,5,4001,6,4200,6,4201,7,4350,7,4351,8,6000,8)


!Xingu Inversor
ABSMN_XI = LFPP(PDC2,400,2,988,2,989,3,1377,3,1378,4,2143,4,2144,5,3893,5,3894,6,4160,6,4161,7,6000,7)

!------!
!MINFIL!
!------!
!@@@ Possui Banda Morta de 50MW   

!Xingu Retificador
MNFIL_XR = LFPP(PDC2,400,2,800,2,801,3,1200,3,1201,4,2800,4,2801,5,3200,5,3201,6,3600,6,3601,7,4000,7,4001,8,6000,8)

!T.Rio Inversor
MNFIL_TI= LFPP(PDC2,400,2,988,2,989,3,2143,3,2144,4,2521,4,2522,5,3265,5,3266,6,3813,6,3814,7,4861,7,4862,8,5028,8,5028,9,6000,9)


!T.Rio Retificador 
MNFIL_TR = LFPP(PDC2,400,2,1000,2,1001,3,1800,3,1801,4,2200,4,2201,5,2600,5,2601,6,3400,6,3401,7,4350,7,4351,8,6000,8)


!Xingu Inversor
MNFIL_XI =LFPP(PDC2,400,2,988,2,989,3,1377,3,1378,4,2143,4,2144,5,2708,5,2709,6,3264,6,3265,7,6000,7)

!-------!
! XINGU !
!-------!

!--------------------!
!DESCONEXÃO DE FILTRO! 
!--------------------!

!-------------------!
!OVERVOLTAGE CONTROL!
!-------------------!

UAC10   = LPASS1(VBX,0.01)

OVSET1X = PARAM(1.15)
OVST1X  = GT(UAC10,OVSET1X)
OV_1X   = TIMER(OVST1X,1.9)

OVSET2X = PARAM(1.20)
OVST2X  = GT(UAC10,OVSET2X)
OV_2X   = TIMER(OVST2X,0.235)

OVSET3X = PARAM(1.27)
OVST3X  = GT(UAC10,OVSET3X)
OV_3X   = TIMER(OVST3X,0.135)

!

DECFOVX = OR(OV_1X,OV_2X,OV_3X)

!------------!
!UMAX CONTROL!
!------------!

!Está desabilitado no Anatem
UMAXX    = PARAM(1.10)
X2205X   = GT(VBXF,UMAXX)
DECUXX   = TIMER(X2205X,3.0)
ENUMXX   = PARAM(0.0)
DECUMXX  = MULT(DECUXX,ENUMXX)

!------------!
!QMAX CONTROL!
!------------!

QMXURFX  = PARAM(1.06)
X2306X   = GE(VBXF,QMXURFX)
X9306X   = AND(X2306X,CTGBP2)
X2307X   = TIMER(X9306X,0.500) 

QAMVRX   = PARAM(220.0)
QAX      = MULT(NA0X2,QAMVRX)
QBMVRX   = PARAM(180.0)
QBX      = MULT(NB0X2,QBMVRX)
QCMVRX   = PARAM(200.0)
QCX      = MULT(NC0X2,QCMVRX)

QDCTACX  = ADD(QAX,QBX,QCX)
QREFX    = PARAM(550.0)
X2304X   = GT(QDCTACX,QREFX)

DECQMXX  = AND(X2304X,X2307X)

!---------------------!
!Condição para atuação!
!---------------------!

DECO1X    = OR(DECFOVX,DECUMXX,DECQMXX)

!---------!
!U CONTROL!
!---------!

U_REFX   = PARAM(1.05)
X2105X   = SUB(VBXF,U_REFX)
U_DBX    = PARAM(0.05)
X2109X   = GT(X2105X,U_DBX)
DEC_UCX  = TIMER(X2109X,5.0)

!----------------!
!INIBE DESCONEXÃO!
!----------------!

UMNENX   = PARAM(0.970)
X2218X   = GT(VBXF,UMNENX)
!
UMXCONX  = AND(DEC_UCX,X2218X)

!Necessita atender ao requisito de rating e harmonico, sendo o harmonico mais restritivo

!------------------------------------------!
!Tempo de Retardo entre desconexão Xingu BP2!
!------------------------------------------!

TRDCUCX2 = PARAM(5.0)  
TRDC1X2  = PARAM(0.500)  
DECOV1QX = OR(OV_1X,DECQMXX)
TRTDC1X2 = SEL(TRDCUCX2,TRDC1X2,DECOV1QX)
!
TRDC23X2 = PARAM(0.01)
DECOV23X = OR(OV_2X,OV_3X)
TRETDCX2 = SEL(TRTDC1X2,TRDC23X2,DECOV23X)

!------------------------------------!
!Comandos para desconexão do Grupo 70!
!------------------------------------!

!Primeiro Banco
DECNC1X  = GT(NC0X2,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH1X   = GT(NT0X2,MNFIL_XR)
DECMN1X  = AND(UMXCONX,DECH1X)
DECP1X   = OR(DECO1X,DECMN1X)      
!
!Condição para atuação
DECC1X   = AND(DECNC1X,DECP1X)
DECFC1X  = SHUNT(DECC1X,8100,200,0.00,REMOVE)
NC1X2    = SUB(NC0X2,DECFC1X)
NT1X2    = SUB(NT0X2,DECFC1X)
!fim

!Segundo Banco
DECNC2X  = GT(NC1X2,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH2X   = GT(NT1X2,MNFIL_XR)
DECUC2X  = AND(UMXCONX,DECH2X)
DECP2X   = OR(DECO1X,DECUC2X)      
!
DECC2X   = AND(DECFC1X,DECNC2X,DECP2X)
DECC2TX  = TIMER2(DECC2X,TRETDCX2)
DECFC2X  = SHUNT(DECC2TX,8100,200,0.00,REMOVE)
NC2X2    = SUB(NC1X2,DECFC2X)
NT2X2    = SUB(NT1X2,DECFC2X)
!fim

!Terceiro Banco
DECNC3X  = GT(NC2X2,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH3X   = GT(NT2X2,MNFIL_XR)
DECUC3X  = AND(UMXCONX,DECH3X)
DECP3X   = OR(DECO1X,DECUC3X)      
!
DECC3X   = AND(DECFC2X,DECNC3X,DECP3X)
DECC3TX  = TIMER2(DECC3X,TRETDCX2)
DECFC3X  = SHUNT(DECC3TX,8100,200,0.00,REMOVE)
NCFX2    = SUB(NC2X2,DECFC3X)
NT3X2    = SUB(NT2X2,DECFC3X)
!fim

!------------------------------------------------------------!
!Comandos para desconexão do Grupo 60 e Grupo 50 Intercalados!
!------------------------------------------------------------!

!Primeiro Filtro B
DECNB1X = GT(NB0X2,P1)
DECCTX  = EQ(NCFX2,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH4X   = GT(NT3X2,MNFIL_XR)
DECUC4X  = AND(UMXCONX,DECH4X)
DECP4X   = OR(DECO1X,DECUC4X)      
!          
DECB1X   = AND(DECNB1X,DECCTX,DECP4X)
DECCTXt  = sample(DECCTX,100)
teste    = sel(TRETDCX2,zero,DECCTX)             
DECB1TX  = TIMER2(DECB1X,teste)                  
DECFB1X  = SHUNT(DECB1TX,8100,180,0.00,REMOVE)     
NB1X2    = SUB(NB0X2,DECFB1X)                          
NT4X2    = SUB(NT3X2,DECFB1X)

!Primeiro Filtro A 
DECNA1X  = GT(NA0X2,P1)
!Comando para iniciar o corte no Grupo 20 caso não haja filtro disponível no 30
DCA1B0X  = EQ(NB0X2,P1)

!Numero de Filtro maior que o mínimo
DECH5X   = GT(NT4X2,MNFIL_XR)
DECUC5X  = AND(UMXCONX,DECH5X)
DECP5X   = OR(DECO1X,DECUC5X)      
!          
DCA1X2   = AND(DECFB1X,DECNA1X,DECCTX,DECP5X) 
DECA1X2  = AND(DCA1B0X,DECCTX,DECP5X)
DECA1X   = OR(DCA1X2,DECA1X2)
DECA1TX  = TIMER2(DECA1X,TRETDCX2)
DECFA1X  = SHUNT(DECA1TX,8100,220,0.00,REMOVE)
NA1X2    = SUB(NA0X2,DECFA1X)
NT5X2    = SUB(NT4X2,DECFA1X)

!Segundo Filtro B
DECNB2X = GT(NB1X2,P1)
!
!Numero de Filtro maior que o mínimo
DECH6X   = GT(NT5X2,MNFIL_XR)
DECUC6X  = AND(UMXCONX,DECH6X)
DECP6X   = OR(DECO1X,DECUC6X)      
!          
DECB2X   = AND(DECFA1X,DECNB2X,DECP6X)             
DECB2TX  = TIMER2(DECB2X,TRETDCX2)                  
DECFB2X  = SHUNT(DECB2TX,8100,180,0.00,REMOVE)     
NB2X2    = SUB(NB1X2,DECFB2X)                          
NT6X2    = SUB(NT5X2,DECFB2X)

!Segundo Filtro A
DECNA2X = GT(NA1X2,P1)
!
!Numero de Filtro maior que o mínimo
DECH7X   = GT(NT6X2,MNFIL_XR)
DECUC7X  = AND(UMXCONX,DECH7X)
DECP7X   = OR(DECO1X,DECUC7X)      
!          
DECA2X   = AND(DECFB2X,DECNA2X,DECP7X)             
DECA2TX  = TIMER2(DECA2X,TRETDCX2)                  
DECFA2X  = SHUNT(DECA2TX,8100,220,0.00,REMOVE)     
NA2X2    = SUB(NA1X2,DECFA2X)                          
NT7X2    = SUB(NT6X2,DECFA2X)
!

!-----------------!
!CONEXÃO DE FILTRO! 
!-----------------!

!---------------------!
!Controle de Subtensão!
!---------------------!

UMINX    = PARAM(0.93)
UMIN1X   = LT(VBXF,UMINX)
INCUMNX  = TIMER(UMIN1X,3.0)

!---------!
!UMAX/UMIN!
!---------!

UREF3X   = SUB(U_REFX,VBXF)
UREF4X   = GT(UREF3X,U_DBX)
INC_UCX  = TIMER(UREF4X,5.0)

!-------------!
!INIBE CONEXÃO!
!-------------!

UMXENX   = PARAM(1.088)
ENIUMX   = LT(VBXF,UMXENX)

INCF1X2  = AND(INC_UCX,ENIUMX)

!-------------------------------!
!Condição para Conexão Xingu BP2!
!-------------------------------!

INCFX    = OR(INCUMNX,INCF1X2) 

!-----------------------------------------!
!Tempo de Retardo entre conexões Xingu BP2!
!-----------------------------------------!

TRETICX2 = PARAM(5.0)

!---------------------------------------------------------!
!Comandos para ConeXão do Grupo 50 e Grupo 60 Intercalados!
!---------------------------------------------------------!

!Primeiro Filtro A
!
ICA1X    = LT(NA0X2,P3)
INCA1X   = AND(ICA1X,INCFX)         
!
!Numero de Filtro menor que o mínimo
!MinFil
ICHA1X   = GT(MNFIL_XR,NT0X2)
ICHA1TX  = TIMER(ICHA1X,5.0)

!AbsMin
ICMA1X   = GT(ABSMN_XR,NT0X2)
ICMA1TX  = TIMER(ICMA1X,0.5)
ICFA1LX  = OR(ICHA1TX,ICMA1TX)
ICFA1X   = AND(ICFA1LX,ICA1X)

!
INCPA1X  = OR(INCA1X,ICFA1X)
! 
INCFA1X  = SHUNT(INCPA1X,8100,220,0.00,ADD)
NAC1X2   = ADD(NA0X2,INCFA1X)
NTINC1X  = ADD(NT0X2,INCFA1X)

!Primeiro Filtro B
!
ICB1X    = LT(NB0X2,P3)
INCB1X   = AND(INCFA1X,ICB1X,INCFX)      
!Iniciar o Conexão no Grupo 60 caso não haja filtro disponível no 50
ICB1A3X  = EQ(NA0X2,P3)
INCB1A3X = AND(ICB1A3X,ICB1X,INCFX)      
!
ICPB1X   = OR(INCB1X,INCB1A3X)      
!Tempo 0.0 ms caso seja o primeiro filtro a ser Conectado
TDELB1X2 = PARAM(0.000)
TRB1A3X2 = SEL(TRETICX2,TDELB1X2,ICB1A3X)
INCB1TX  = TIMER2(ICPB1X,TRB1A3X2)                   

!Numero de Filtro menor que o mínimo
!MinFil  
ICHB1X   = GT(MNFIL_XR,NTINC1X)
INCHB1X  = AND(ICHB1X,ICHA1TX,ICB1X)
!Inicia no 30 por indisponibilidade no 20
ICHB1AX  = AND(ICHB1X,ICB1A3X,ICB1X)         
IHB1AX   = OR(INCHB1X,ICHB1AX)
ICHB1TX  = TIMER(IHB1AX,5.0)                            

!AbsMin       
ICMB1X   = GT(ABSMN_XR,NTINC1X)
INCMB1X  = AND(ICMB1X,ICMA1TX,ICB1X) 
!Inicia no 30 por indisponibilidade no 20
ICMB1AX  = AND(ICMB1X,ICB1A3X,ICB1X)         
TAABX    = PARAM(0.5)
TRABX    = PARAM(1.5)
TDABX    = SEL(TAABX,TRABX,INCMB1X)
IMB1X    = OR(INCMB1X,ICMB1AX)
ICMB1TX  = TIMER2(IMB1X,TDABX)                        

!Condição para atuação por filtro
ICFB1X   = OR(ICHB1TX,ICMB1TX)                       

ICTB1X   = OR(ICHB1TX,ICFB1X)
INCFB1X  = SHUNT(ICTB1X,8100,180,0.00,ADD)

NBC1X2   = ADD(NB0X2,INCFB1X)
NTINC2X  = ADD(NTINC1X,INCFB1X)

!Segundo Filtro A
ICA2X    = LT(NAC1X2,P3)
INCA2X   = AND(ICA2X,INCFX,INCFB1X)         
INCA2TX  = TIMER2(INCA2X,TRETICX2)

!Numero de Filtro menor que o mínimo
!MinFil
ICHA2X   = GT(MNFIL_XR,NTINC2X)
INCHA2X  = AND(ICHA2X,ICA2X,INCFB1X)        
INCHA2TX = TIMER(INCHA2X,5.0)

!AbsMin
ICMA2X   = GT(ABSMN_XR,NTINC2X)
INCMA2X  = AND(ICMA2X,ICA2X,INCFB1X)        
INCMA2TX = TIMER(INCMA2X,2.0)

!Condição para atuação por filtro
ICFA2X   = OR(INCHA2TX,INCMA2TX)                       

!
INCPA2X  = OR(INCA2TX,ICFA2X) 
INCFA2X  = SHUNT(INCPA2X,8100,220,0.120,ADD)
NAC2X2   = ADD(NAC1X2,INCFA2X)
NTINC3X  = ADD(NTINC2X,INCFA2X)   
!

!Segundo Filtro B
ICB2X    = LT(NBC1X2,P3)
INCB2X   = AND(ICB2X,INCFX,INCFA2X,NINHCX)
INCB2TX  = TIMER2(INCB2X,TRETICX2)

!Numero de Filtro menor que o mínimo
!MinFil
ICHB2X   = GT(MNFIL_XR,NTINC3X)
INCHB2X  = AND(ICHB2X,ICB2X,INCFA2X)        
INCHB2TX = TIMER(INCHB2X,5.0)

!AbsMin
ICMB2X   = GT(ABSMN_XR,NTINC3X)
INCMB2X  = AND(ICMB2X,ICB2X,INCFA2X)        
INCMB2TX = TIMER(INCMB2X,2.0)

!Condição para atuação por filtro
ICFB2X   = OR(INCHB2TX,INCMB2TX)                       

!
INCPB2X  = OR(INCB1TX,ICFB2X) 
INCFB2X  = SHUNT(INCPB2X,8100,180,0.120,ADD)
NBC2X2   = ADD(NBC1X2,INCFB2X)
NTINC4X  = ADD(NTINC3X,INCFB2X)   

!---------------------------------!
!Comandos para Conexão do Grupo 70!
!---------------------------------!
!
!Verifca se todos os filtro A e B foram Conectados
INCCAX   = EQ(NAC2X2,P3)
INCCBX   = EQ(NBC2X2,P3) 
INCCABX  = AND(INCCAX,INCCBX)

!Primeiro Banco
ICC1X    = LT(NC0X2,P3) 
INCC1X   = AND(INCCABX,INCFX)  

NICA1X   = NOT(ICA1X)
NICB1X   = NOT(ICB1X)

NAB3X    = AND(NICA1X,NICB1X)
SELTRB2X = SEL(TRETICX2,ZERO,NAB3X)

          
INCC1TX  = TIMER2(INCC1X,SELTRB2X)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC1X   = GT(MNFIL_XR,NTINC4X)
INCHC1X  = AND(ICHC1X,ICC1X,INCCABX)        
INCHC1TX = TIMER(INCHC1X,5.0)

!AbsMin
ICMC1X   = GT(ABSMN_XR,NTINC4X)
INCMC1X  = AND(ICMC1X,ICC1X,INCCABX)        
INCMC1TX = TIMER(INCMC1X,2.0)

!Condição para atuação por filtro
ICFC1X   = OR(INCHC1TX,INCMC1TX)                       

INCPC1X  = OR(INCC1TX,ICFC1X) 
INCFC1X  = SHUNT(INCPC1X,8100,200,0.00,ADD)
NCC1X2   = ADD(NC0X2,INCFC1X)
NTINC5X  = ADD(NTINC4X,INCFC1X)   

!Segundo Banco
ICC2X    = LT(NCC1X2,P3) 
INCC2X   = AND(ICC2X,INCFX,INCFC1X)                  
INCC2TX  = TIMER2(INCC2X,TRETICX2)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC2X   = GT(MNFIL_XR,NTINC5X)
INCHC2X  = AND(ICHC2X,ICC2X,INCFC1X)        
INCHC2TX = TIMER(INCHC2X,5.0)

!AbsMin
ICMC2X   = GT(ABSMN_XR,NTINC5X)
INCMC2X  = AND(ICMC2X,ICC2X,INCFC1X)        
INCMC2TX = TIMER(INCMC2X,2.0)

!Condição para atuação por filtro
ICFC2X   = OR(INCHC2TX,INCMC2TX)        

INCPC2X  = OR(INCC2TX,ICFC2X) 
INCFC2X  = SHUNT(INCPC2X,8100,200,0.00,ADD)
NCC2X2   = ADD(NCC1X2,INCFC2X)
NTINC6X  = ADD(NTINC5X,INCFC2X)


!Terceiro Banco
ICC3X    = LT(NCC2X2,P3) 
INCC3X   = AND(ICC3X,INCFX,INCFC2X)                 !,NINHCX)  
INCC3TX  = TIMER2(INCC3X,TRETICX2)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC3X   = GT(MNFIL_XR,NTINC6X)
INCHC3X  = AND(ICHC3X,ICC3X,INCFC2X)        
INCHC3TX = TIMER(INCHC3X,5.0)

!AbsMin
ICMC3X   = GT(ABSMN_XR,NTINC6X)
INCMC3X  = AND(ICMC3X,ICC3X,INCFC2X)        
INCMC3TX = TIMER(INCMC3X,2.0)

!Condição para atuação por filtro
ICFC3X   = OR(INCHC3TX,INCMC3TX)        

INCPC3X  = OR(INCC3TX,ICFC3X) 
INCFC3X  = SHUNT(INCPC3X,8100,200,0.00,ADD)
NCC3X2   = ADD(NCC2X2,INCFC3X)
NTINC7X  = ADD(NTINC6X,INCFC2X)

!--------------!
! TERMINAL RIO !
!--------------!

VBT      = BUS(9605,VOLT)
VBTF     = LPASS1(VBT,0.01)
VBTF10   = LPASS1(VBT,0.01)
VBTF100  = LPASS1(VBT,0.10)

!-----------------------------------------------!
!Número inicial de Filtros e Bancos de Capacitor!
!-----------------------------------------------!

NA0TR    = SHUNTG(9605,10,NBON)
NB0TR    = SHUNTG(9605,20,NBON)
NC0TR    = SHUNTG(9605,30,NBON)
NT0TR    = ADD(NA0TR,NB0TR,NC0TR)

!--------------------!
!DESCONEXÃO DE FILTRO! 
!--------------------!

!-------------------!
!OVERVOLTAGE CONTROL!
!-------------------!

OVSET0   = PARAM(1.10)
OVSETC0  = GT(VBTF,OVSET0)
OV0_TR   = TIMER(OVSETC0,3.0)

OVSET1   = PARAM(1.176)       
OVSETC1  = GT(VBTF,OVSET1)
OV1_TR   = TIMER(OVSETC1,1.9)

OVSET2   = PARAM(1.284)       
OVSETC2  = GT(VBTF,OVSET2)
OV2_TR   = TIMER(OVSETC2,0.235)

OVSET3   = PARAM(1.390)       
OVSETC3  = GT(VBTF,OVSET3)
OV3_TR   = TIMER(OVSETC3,0.135)
!

DECOVTR  = OR(OV0_TR,OV1_TR,OV2_TR,OV3_TR)

!------------!
!UMAX CONTROL!
!------------!

!Está desabilitado no Anatem   
UMAXTR   = PARAM(1.100)
X2205TR  = GT(VBTF,UMAXTR)
DECUXTR  = TIMER(X2205TR,3.0)
ENUMXTR  = PARAM(0.0)  
DECUMXTR = MULT(DECUXTR,ENUMXTR)

!------------!
!QMAX CONTROL!
!------------!

QMXURFTR  = PARAM(1.07)
X2306TR   = GE(VBTF,QMXURFTR)
X9306TR   = AND(X2306TR,CTGBP2)
X2307TR   = TIMER(X9306TR,0.500) 

QAMVRTR   = PARAM(225.0)
QATR      = MULT(NA0TR,QAMVRTR)
QBMVRTR   = PARAM(225.0)
QBTR      = MULT(NB0TR,QBMVRTR)
QCMVRTR   = PARAM(225.0)
QCTR      = MULT(NC0TR,QCMVRTR)

QDCTACTR  = ADD(QATR,QBTR,QCTR)
QREFTR    = PARAM(250.0)
X2304TR   = GT(QDCTACTR,QREFTR)

DECQMXTR  = AND(X2304TR,X2307TR)

!---------------------!
!Condição para atuação!
!---------------------!

DECO1TR   = OR(DECOVTR,DECUMXTR,DECQMXTR)

!---------!
!U CONTROL!
!---------!

U_REFTR  = PARAM(1.07)
X2105TR  = SUB(VBTF,U_REFTR)
U_DBTR   = PARAM(0.014)
X2109TR  = GT(X2105TR,U_DBTR)
DEC_UCTR = TIMER(X2109TR,5.0)

!----------------!
!INIBE DESCONEXÃO!
!----------------!

UMNENTR  = PARAM(1.02)
X2218TR  = GT(VBTF,UMNENTR)

UMXCONTR = AND(DEC_UCTR,X2218TR)                  

!----------------------------------------------!
!Tempo de Retardo entre desconexões Terminal Rio!
!----------------------------------------------!

TRDCUCTR = PARAM(5.00)  
TRDC1TR  = PARAM(8.00)  
TRDC2TR  = PARAM(1.00)
TRDC3TR  = PARAM(0.25)   

TRTDC1TR = SEL(TRDC1TR,TRDCUCTR,OVSETC1)
TRTDC2TR = SEL(TRTDC1TR,TRDC2TR,OVSETC2)
TRTDCTR  = SEL(TRTDC2TR,TRDC3TR,OVSETC3)

!------------------------------------!
!Comandos para desconexão do Grupo 30!
!------------------------------------!

!Primeiro Banco
DECNC1TR = GT(NC0TR,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH1TR  = GT(NT0TR,MNFIL_TI)
DECMN1TR = AND(UMXCONTR,DECH1TR)
DECP1TR  = OR(DECO1TR,DECMN1TR)      
!
!Condição para atuação
DECC1TR  = AND(DECNC1TR,DECP1TR)
DECFC1TR = SHUNT(DECC1TR,9605,225,0.00,REMOVE)
NC1TR    = SUB(NC0TR,DECFC1TR)
NT1TR    = SUB(NT0TR,DECFC1TR)
!fim

!Segundo Banco
DECNC2TR = GT(NC1TR,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH2TR  = GT(NT1TR,MNFIL_TI)
DECMN2TR = AND(UMXCONTR,DECH2TR)
DECP2TR  = OR(DECO1TR,DECMN2TR)      
!
!Condição para atuação
DECC2TR  = AND(DECNC2TR,DECP2TR,DECFC1TR)
DECC2TTR = TIMER2(DECC2TR,TRTDCTR)   
DECFC2TR = SHUNT(DECC2TTR,9605,225,0.00,REMOVE)
NC2TR    = SUB(NC1TR,DECFC2TR)
NT2TR    = SUB(NT1TR,DECFC2TR)
!fim

!Terceiro Banco
DECNC3TR = GT(NC2TR,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH3TR  = GT(NT2TR,MNFIL_TI)
DECMN3TR = AND(UMXCONTR,DECH3TR)
DECP3TR  = OR(DECO1TR,DECMN3TR)      
!
!Condição para atuação
DECC3TR  = AND(DECNC3TR,DECP3TR,DECFC2TR)
DECC3TTR = TIMER2(DECC3TR,TRTDCTR)   
DECFC3TR = SHUNT(DECC3TTR,9605,225,0.00,REMOVE)
NC3TR    = SUB(NC2TR,DECFC3TR)
NT3TR    = SUB(NT2TR,DECFC3TR)
!fim

!Quarto Banco
DECNC4TR = GT(NC3TR,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH4TR  = GT(NT2TR,MNFIL_TI)
DECMN4TR = AND(UMXCONTR,DECH4TR)
DECP4TR  = OR(DECO1TR,DECMN4TR)      
!
!Condição para atuação
DECC4TR  = AND(DECNC4TR,DECP4TR,DECFC3TR)
DECC4TTR = TIMER2(DECC4TR,TRTDCTR)   
DECFC4TR = SHUNT(DECC4TTR,9605,225,0.00,REMOVE)
NC4TR    = SUB(NC3TR,DECFC4TR)
NT4TR    = SUB(NT3TR,DECFC4TR)
!fim
               
!Quinto Banco
DECNC5TR = GT(NC4TR,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH5TR  = GT(NT2TR,MNFIL_TI)
DECMN5TR = AND(UMXCONTR,DECH5TR)
DECP5TR  = OR(DECO1TR,DECMN5TR)      
!
!Condição para atuação
DECC5TR  = AND(DECNC5TR,DECP5TR,DECFC4TR)
DECC5TTR = TIMER2(DECC5TR,TRTDCTR)   
DECFC5TR = SHUNT(DECC5TTR,9605,225,0.00,REMOVE)
NC5TR    = SUB(NC4TR,DECFC5TR)
NT5TR    = SUB(NT4TR,DECFC5TR)
!fim

!Sexto Banco
DECNC6TR = GT(NC5TR,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH6TR  = GT(NT2TR,MNFIL_TI)
DECMN6TR = AND(UMXCONTR,DECH6TR)
DECP6TR  = OR(DECO1TR,DECMN6TR)      
!
!Condição para atuação
DECC6TR  = AND(DECNC6TR,DECP6TR,DECFC5TR)
DECC6TTR = TIMER2(DECC6TR,TRTDCTR)   
DECFC6TR = SHUNT(DECC6TTR,9605,225,0.00,REMOVE)
NC6TR    = SUB(NC5TR,DECFC6TR)
NT6TR    = SUB(NT5TR,DECFC6TR)
!fim

!------------------------------------------------------------!
!Comandos para desconexão do Grupo 20 e Grupo 10 Intercalados!
!------------------------------------------------------------!

!Primeiro Filtro B
DECNB1TR = GT(NB0TR,P1)
DECCTTR  = EQ(NC6TR,ZERO)
!
!Numero de Filtro maior que o mínimo
DECH7TR   = GT(NT6TR,MNFIL_TI)
DECUC7TR  = AND(UMXCONTR,DECH7TR)
DECP7TR   = OR(DECO1TR,DECUC7TR)      
!          
DECB1TR   = AND(DECNB1TR,DECCTTR,DECP7TR)             
DECB1TTR  = TIMER2(DECB1TR,TRTDCTR)                  
DECFB1TR  = SHUNT(DECB1TTR,9605,225,0.00,REMOVE)     
NB1TR     = SUB(NB0TR,DECFB1TR)                          
NT7TR     = SUB(NT3TR,DECFB1TR)

!Primeiro Filtro A 
DECNA1TR  = GT(NA0TR,P1)
!Comando para iniciar o corte no Grupo 20 caso não haja filtro dDCponível no 30
DCA1B0TR  = EQ(NB0TR,P1)

!Numero de Filtro maior que o mínimo
DECH8TR   = GT(NT7TR,MNFIL_TRR)
DECUC8TR  = AND(UMXCONTR,DECH8TR)
DECP8TR   = OR(DECO1TR,DECUC8TR)      
!          
DCA1TR   = AND(DECFB1TR,DECNA1TR,DECCTTR,DECP8TR) 
DECA1TR  = AND(DCA1B0TR,DECCTTR,DECP8TR)
DECA1TR2 = OR(DCA1TR,DECA1TR)
DECA1TTR = TIMER2(DECA1TR2,TRTDCTR)
DECFA1TR = SHUNT(DECA1TTR,9605,225,0.00,REMOVE)
NA1TR    = SUB(NA0TR,DECFA1TR)
NT8TR    = SUB(NT7TR,DECFA1TR)

!Segundo Filtro B
DECNB2TR = GT(NB1TR,P1)
!
!Numero de Filtro maior que o mínimo
DECH9TR  = GT(NT8TR,MNFIL_TRR)
DECUC9TR = AND(UMXCONTR,DECH9TR)
DECP9TR  = OR(DECO1TR,DECUC9TR)      
!          
DECB2TR  = AND(DECFA1TR,DECNB2TR,DECP9TR)             
DECB2TTR = TIMER2(DECB2TR,TRTDCTR)                  
DECFB2TR = SHUNT(DECB2TTR,9605,225,0.00,REMOVE)     
NB2TR    = SUB(NB1TR,DECFB2TR)                          
NT9TR    = SUB(NT8TR,DECFB2TR)
!
!Segundo Filtro A
DECNA2TR = GT(NA1TR,P1)
!
!Numero de Filtro maior que o mínimo
DECH10TR = GT(NT6TR,MNFIL_TRR)
DECC10TR = AND(UMXCONTR,DECH10TR)
DECP10TR = OR(DECO1TR,DECC10TR)      
!          
DECA2TR  = AND(DECFB2TR,DECNA2TR,DECP10TR)             
DECA2TTR = TIMER2(DECA2TR,TRTDCTR)                  
DECFA2TR = SHUNT(DECA2TTR,9605,225,0.00,REMOVE)     
NA2TR    = SUB(NA1TR,DECFA2TR)                          
NT10TR   = SUB(NT9TR,DECFA2TR)

!-----------------!
!CONEXÃO DE FILTRO! 
!-----------------!

!---------------------!
!Controle de Subtensão!
!---------------------!

UMINTR   = PARAM(0.99)
UMIN1TR  = LT(VBTF100,UMINTR)
INCUMNTR = TIMER(UMIN1TR,3.0)

!---------!
!UMAX/UMIN!
!---------!

UREFIDTR = SUB(U_REFTR,VBTF100)
UREFITR  = GT(UREFIDTR,U_DBTR)
INC_UCTR = TIMER(UREFITR,5.0)

!-------------!
!INIBE CONEXÃO!
!-------------!

UMXENTR  = PARAM(1.09)
ENIUMXTR = LT(VBTF100,UMXENTR)

INCF1TR  = AND(INC_UCTR,ENIUMXTR)

!----------------------------------!
!Condição para Conexão Terminal Rio!
!----------------------------------!

INCFTR   = OR(INCUMNTR,INCF1TR)           

!----------------------------!
!Tempo de Retardo Terminal Rio!
!----------------------------!

TRETICTR = PARAM(5.0)    

!---------------------------------------------------------!
!Comandos para Conexão do Grupo 20 e Grupo 10 Intercalados!
!---------------------------------------------------------!

!Primeiro Filtro A
!
ICA1TR    = LT(NA0TR,P3)
INCA1TR   = AND(ICA1TR,INCFTR)        

!Numero de Filtro menor que o mínimo
!MinFil
ICHA1TR   = GT(MNFIL_TI,NT0TR)
ICHA1TTR  = TIMER(ICHA1TR,5.0)

!AbsMin
ICMA1TR  = GT(ABSMN_TI,NT0TR)
ICMA1TTR = TIMER(ICMA1TR,0.5)
ICFA1TR  = OR(ICHA1TTR,ICMA1TTR)

!
INCPA1TR = OR(INCA1TR,ICFA1TR)
! 
INCFA1TR  = SHUNT(INCPA1TR,9605,225,0.00,ADD)
NAC1TR    = ADD(NA0TR,INCFA1TR)
NTINC1TR  = ADD(NT0TR,INCFA1TR)

!Primeiro Filtro B
!
ICB1TR   = LT(NB0TR,P3)
INCB1TR  = AND(INCFA1TR,ICB1TR,INCFTR)      
!Iniciar o Conexão no Grupo 60 caso não haja filtro disponível no 50
IB1A3TR  = EQ(NA0TR,P3)
INB1A3TR = AND(IB1A3TR,ICB1TR,INCFTR)     
!
ICPB1TR  = OR(INCB1TR,INB1A3TR)      
!Tempo 0.0 ms caso seja o primeiro filtro a ser Conectado
TDELB1TR = PARAM(0.000)
TRB1A3TR = SEL(TRETICTR,TDELB1TR,IB1A3TR)
INCB1TTR = TIMER2(ICPB1TR,TRB1A3TR)                   

!Numero de Filtro menor que o mínimo
!MinFil  
ICHB1TR  = GT(MNFIL_TI,NTINC1TR)
INCHB1TR = AND(ICHB1TR,ICHA1TTR,ICB1TR)
!Inicia no 30 por indisponibilidade no 20
ICHB1ATR = AND(ICHB1TR,IB1A3TR,ICB1TR)         
IHB1ATR  = OR(INCHB1TR,ICHB1ATR)
ICHB1TTR = TIMER(IHB1ATR,5.0)                            

!AbsMin       
ICMB1TR  = GT(ABSMN_TI,NTINC1TR)
INCMB1TR = AND(ICMB1TR,ICMA1TTR,ICB1TR) 
!Inicia no 30 por indisponibilidade no 20
ICMB1ATR = AND(ICMB1TR,IB1A3TR,ICB1TR)         
TAABTR   = PARAM(0.5)
TRABTR   = PARAM(2.0)
TDABTR   = SEL(TAABTR,TRABTR,INCMB1TR)
IMB1TR   = OR(INCMB1TR,ICMB1ATR)
ICMB1TTR = TIMER2(IMB1TR,TDABTR)                        

!Condição para atuação por filtro
ICFB1TR  = OR(ICHB1TTR,ICMB1TTR)                       

ICTB1TR  = OR(INCB1TTR,ICFB1TR) 

INCFB1TR = SHUNT(ICTB1TR,9605,225,0.00,ADD)
NBC1TR   = ADD(NB0TR,INCFB1TR)
NTINC2TR = ADD(NTINC1TR,INCFB1TR)

!Segundo Filtro A
ICA2TR   = LT(NAC1TR,P3)
INCA2TR  = AND(ICA2TR,INCFTR,INCFB1TR)         
INCA2TTR = TIMER2(INCA2TR,TRETICTR)

!Numero de Filtro menor que o mínimo
!MinFil
ICHA2TR  = GT(MNFIL_TI,NTINC2TR)
INCHA2TR = AND(ICHA2TR,ICA2TR,INCFB1TR)        
ICHA2TTR = TIMER(INCHA2TR,5.0)

!AbsMin
ICMA2TR  = GT(ABSMN_TI,NTINC2TR)
INCMA2TR = AND(ICMA2TR,ICA2TR,INCFB1TR)        
ICMA2TTR = TIMER(INCMA2TR,2.0)

!Condição para atuação por filtro
ICFA2TR  = OR(ICHA2TTR,ICMA2TTR)                       

!
INCPA2TR = OR(INCA2TTR,ICFA2TR) 
INCFA2TR = SHUNT(ICFA2TR,9605,225,0.120,ADD)
NAC2TR   = ADD(NAC1TR,INCFA2TR)
NTINC3TR = ADD(NTINC2TR,INCFA2TR)   
!

!Segundo Filtro B
ICB2TR   = LT(NBC1TR,P3)
!teste para quando já tiverem dois filtros em A e um em B
test21ab = and(INCFA1TR,INCCATR,INCFB1TR)
test2a1b = or(test21ab,INCFA2TR)
INCB2TR  = AND(ICB2TR,INCFTR,test2a1b)          
INCB2TTR = TIMER2(INCB2TR,TRETICTR)

!Numero de Filtro menor que o mínimo
!MinFil
ICHB2TR  = GT(MNFIL_TI,NTINC3TR)
INCHB2TR = AND(ICHB2TR,ICB2TR,test2a1b)        
ICHB2TTR = TIMER(INCHB2TR,5.0)

!AbsMin
ICMB2TR  = GT(ABSMN_TI,NTINC3TR)
INCMB2TR = AND(ICMB2TR,ICB2TR,test2a1b)
ICMB2TTR = TIMER(INCMB2TR,0.05)
TEST4    = NOT(ICMB2TTR)

!Condição para atuação por filtro
ICFB2TR  = AND(ICHB2TTR,TEST4)                       
!
INCPB2TR  = OR(INCB2TTR,ICFB2TR) 

INCFB2T1  = SHUNT(ICMB2TTR,9605,225,2.00,ADD)
TEST5     = NOT(INCFB2T1)

TEST6     = AND(INCPB2TR,TEST5)
INCFB2T2  = SHUNT(TEST6,9605,225,0.120,ADD)

TEST7     = TIMER(INCFB2T1,2.0)
INCFB2TR  = OR(TEST7,INCFB2T2)

NBC2TR   = ADD(NBC1TR,INCFB2TR)
NTINC4TR = ADD(NTINC3TR,INCFB2TR)   

!---------------------------------!
!Comandos para Conexão do Grupo 30!
!---------------------------------!                                           !@@@ VERIFICAR TODOS OS COMANDOS DE CONEXÃO INICIANDO PELO CAPACITOR QUANDO FILTRO JA ESTIVER NO MAX
!
!Verifca se todos os filtro A e B foram Conectados
INCCATR   = EQ(NAC2TR,P3)
INCCBTR   = EQ(NBC2TR,P3) 
INCCABTR  = AND(INCCATR,INCCBTR)

!Primeiro Banco
ICC1TR   = LT(NC0TR,P6) 
INCC1TR  = AND(INCCABTR,INCFTR) 

!ACERTA ATRASO CASO COMECE POR C
NICA1TR  = NOT(ICA1TR)
NICB1TR  = NOT(ICB1TR)
INICCTR  = AND(NICA1TR,NICB1TR)

SELTRTR  = SEL(TRETICTR,ZERO,INICCTR)              
INCC1TTR = TIMER2(INCC1TR,SELTRTR)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC1TR  = GT(MNFIL_TI,NTINC4TR)
INCHC1TR = AND(ICHC1TR,ICC1TR,INCFB2TR)        
ICHC1TTR = TIMER(INCHC1TR,5.0)

!AbsMin
ICMC1TR  = GT(ABSMN_TI,NTINC4TR)
INCMC1TR = AND(ICMC1TR,ICC1TR,INCFB2TR)        
ICMC1TTR = TIMER(INCMC1TR,2.0)

!Condição para atuação por filtro
ICFC1TR  = OR(ICHC1TTR,ICMC1TTR)                       

INCPC1TR = OR(INCC1TTR,ICFC1TR)  
INCFC1TR = SHUNT(INCPC1TR,9605,225,0.00,ADD)
NCC1TR   = ADD(NC0TR,INCFC1TR)
NTINC5TR = ADD(NTINC4TR,INCFC1TR)   

!Segundo Banco
ICC2TR   = LT(NCC1TR,P6) 
INCC2TR  = AND(ICC2TR,INCFTR,INCFC1TR)                 !,NINHCTR)  
INCC2TTR = TIMER2(INCC2TR,TRETICTR)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC2TR  = GT(MNFIL_TI,NTINC5TR)
INCHC2TR = AND(ICHC2TR,ICC2TR,INCFC1TR)        
ICHC2TTR = TIMER(INCHC2TR,5.0)

!AbsMin
ICMC2TR  = GT(ABSMN_TI,NTINC5TR)
INCMC2TR = AND(ICMC2TR,ICC2TR,INCFC1TR)        
ICMC2TTR = TIMER(INCMC2TR,2.0)

!Condição para atuação por filtro
ICFC2TR  = OR(ICHC2TTR,ICMC2TTR)        

INCPC2TR = OR(INCC2TTR,ICFC2TR) 
INCFC2TR = SHUNT(INCPC2TR,9605,225,0.00,ADD)
NCC2TR   = ADD(NCC1TR,INCFC2TR)
NTINC6TR = ADD(NTINC5TR,INCFC2TR)

!Terceiro Banco
ICC3TR   = LT(NCC2TR,P6) 
INCC3TR  = AND(ICC3TR,INCFTR,INCFC2TR)                 
INCC3TTR = TIMER2(INCC3TR,TRETICTR)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC3TR  = GT(MNFIL_TI,NTINC6TR)
INCHC3TR = AND(ICHC3TR,ICC3TR,INCFC2TR)        
ICHC3TTR = TIMER(INCHC3TR,5.0)

!AbsMin
ICMC3TR  = GT(ABSMN_TI,NTINC6TR)
INCMC3TR = AND(ICMC3TR,ICC3TR,INCFC2TR)        
ICMC3TTR = TIMER(INCMC3TR,2.0)

!Condição para atuação por filtro
ICFC3TR  = OR(ICHC3TTR,ICMC3TTR)        

INCPC3TR = OR(INCC3TTR,ICFC3TR) 
INCFC3TR = SHUNT(INCPC3TR,9605,225,0.00,ADD)
NCC3TR   = ADD(NCC2TR,INCFC3TR)
NTINC7TR = ADD(NTINC6TR,INCFC3TR)

!Quarto Banco
ICC4TR    = LT(NCC3TR,P6) 
INCC4TR   = AND(ICC4TR,INCFTR,INCFC3TR)               
INCC4TTR  = TIMER2(INCC4TR,TRETICTR)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC4TR  = GT(MNFIL_TI,NTINC7TR)
INCHC4TR = AND(ICHC4TR,ICC4TR,INCFC2TR)        
ICHC4TTR = TIMER(INCHC4TR,5.0)

!AbsMin
ICMC4TR  = GT(ABSMN_TI,NTINC7TR)
INCMC4TR = AND(ICMC4TR,ICC4TR,INCFC2TR)        
ICMC4TTR = TIMER(INCMC4TR,2.0)

!Condição para atuação por filtro
ICFC4TR  = OR(ICHC4TTR,ICMC4TTR)        

INCPC4TR = OR(INCC4TTR,ICFC4TR) 
INCFC4TR = SHUNT(INCPC4TR,9605,225,0.00,ADD)
NCC4TR   = ADD(NCC3TR,INCFC4TR)
NTINC8TR = ADD(NTINC7TR,INCFC4TR)

!Quinto Banco
ICC5TR   = LT(NCC4TR,P6) 
INCC5TR  = AND(ICC5TR,INCFTR,INCFC4TR)                
INCC5TTR = TIMER2(INCC5TR,TRETICTR)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC5TR  = GT(MNFIL_TI,NTINC8TR)
INCHC5TR = AND(ICHC5TR,ICC5TR,INCFC2TR)        
ICHC5TTR = TIMER(INCHC5TR,5.0)

!AbsMin
ICMC5TR  = GT(ABSMN_TI,NTINC8TR)
INCMC5TR = AND(ICMC5TR,ICC5TR,INCFC2TR)        
ICMC5TTR = TIMER(INCMC5TR,2.0)

!Condição para atuação por filtro
ICFC5TR  = OR(ICHC5TTR,ICMC5TTR)        

INCPC5TR = OR(INCC5TTR,ICFC5TR) 
INCFC5TR = SHUNT(INCPC5TR,9605,225,0.00,ADD)
NCC5TR   = ADD(NCC4TR,INCFC5TR)
NTINC9TR = ADD(NTINC8TR,INCFC5TR)

!Sexto Banco
ICC6TR    = LT(NCC5TR,P6) 
INCC6TR   = AND(ICC6TR,INCFTR,INCFC5TR)                
INCC6TTR  = TIMER2(INCC6TR,TRETICTR)    

!Numero de Filtro menor que o mínimo
!MinFil
ICHC6TR  = GT(MNFIL_TI,NTINC9TR)
INCHC6TR = AND(ICHC6TR,ICC6TR,INCFC2TR)        
ICHC6TTR = TIMER(INCHC6TR,5.0)

!AbsMin
ICMC6TR  = GT(ABSMN_TI,NTINC9TR)
INCMC6TR = AND(ICMC6TR,ICC6TR,INCFC2TR)        
ICMC6TTR = TIMER(INCMC6TR,2.0)

!Condição para atuação por filtro
ICFC6TR  = OR(ICHC6TTR,ICMC6TTR)        

INCPC6TR = OR(INCC6TTR,ICFC6TR) 
INCFC6TR  = SHUNT(INCPC6TR,9605,225,0.00,ADD)
NCC6TR    = ADD(NCC5TR,INCFC6TR)
NTIC10TR  = ADD(NTINC9TR,INCFC6TR)

END


SPS BTACBA1           

!ST_BTCB1 = TLINE(895,959,1,STATUS)         !STATUS da LT BTA-CBA1 --> LIGADO = 1
!ESTN1 = NOT(ST_BTCB1)                      !LT 525 kV BTA-CBA 1 desligada    
!
BTCB1_pu = TLINE(895,959,1,SFLOW)           !Fluxo da LT BTA-CBA1 (p.u.)
Conv = PARAM (100)                          !Base para conversÃ£o de p.u. em MVA
BTCB1MVA = MULT(BTCB1_pu,Conv)              !Fluxo da LT BTA-CBA1 (MVA)
Limite = PARAM(2727)                        !Limite de Fluxo na LT BTA-CBA 1 ! Novo limite apÃ³s substituiÃ§Ã£o equips
F_BTCB1 = GE(BTCB1MVA,Limite)               !CondiÃ§Ã£o de Fluxo na LT BTA-CBA1 > 2727 MVA => Abrir LT PGR-BTA C1      
!
! TEMPORIZACOES
T1  = TIMER(F_BTCB1,5.)                     ! ESTAGIO 1 - MONITORA BTA-CBA1 5seg (20seg na pratica do SEP)
T2  = TIMER(F_BTCB1,8.)                     ! ESTAGIO 2 - MONITORA BTA-CBA1 8seg (30seg na pratica do SEP)
!
ATUA1 = OPEN(T1,10008,895,1,0.1)            ! ESTAGIO 1 - ABRE C1 DA LT PGR-BTA C1
ATUA2 = OPEN(T2,10008,895,2,0.1)            ! ESTAGIO 2 - ABRE C1 DA LT PGR-BTA C2
!
!VIOLA1 = LSHEDFLG (ATUA1)                  !! Marcar Rachurado na Reg Seg
!VIOLA2 = LSHEDFLG (ATUA2)                  !! Marcar Rachurado na Reg Seg
!
END

SPS CORB

!------------!
! PARÂMETROS !
!------------!

P4       = PARAM(4)
P100     = PARAM(1.00)
P1000    = PARAM(1000)
P1400    = PARAM(14.0)

!---------------------------------!
! LTs COLINAS - RIBEIRO GONÇALVES !
!---------------------------------!

! CALCULO DO FLUXO ! 
                      
FCORG1   = TLINE(7300,5437,1,PFLOW)               !PARC#1 CO-RG                                                                  
FCORG2   = TLINE(7300,5575,2,PFLOW)               !PARC#2 CO-RG                                                                  
SCORG12  = ADD(FCORG1,FCORG2)                     !Soma CO-RG                                                                         
FCORG    = SAMPLE(SCORG12,100)         

! PERDA DUPLA !

! CIRCUITO 1

SLCORG1  = TLINE(7300,5437,1,STATUS)              !Linha
SLCORG1N = NOT(SLCORG1)
         
SCCORG1  = SERCAP(5437,5436,1,STATUS)             !Capacitor Série
SCCORG1N = NOT(SCCORG1)

! CIRCUITO 2    
     
SLCORG2  = TLINE(7300,5575,2,STATUS)              !Linha 
SLCORG2N = NOT(SLCORG2)
         
SCCORG2  = SERCAP(5575,5436,2,STATUS)             !Capacitor Série
SCCORG2N = NOT(SCCORG2)

PDL_CORG = AND(SLCORG1N,SLCORG2N)
PDC_CORG = AND(SCCORG1N,SCCORG2N)
PD_CORG  = OR(PDL_CORG,PDC_CORG)
                                                                            
!------------------------!
! LTs COLINAS - MIRACEMA !
!------------------------!

! CALCULO DO FLUXO !
                      
FCOMC1   = SERCAP(7300,7301,1,PFLOW)               !PARC#1 CO-MC                                                                  
FCOMC2   = SERCAP(7300,7303,2,PFLOW)               !PARC#2 CO-MC                                                                  
FCOMC3   = SERCAP(7300,7305,3,PFLOW)               !PARC#2 CO-MC                                                                  

SCOMC123 = ADD(FCOMC1,FCOMC2,FCOMC2)              !Soma CO-MC                                                                         
FCOMC    = SAMPLE(SCOMC123,100)      

!-------------------------------------------!
! LTs RIBEIRO GONÇALVES - SÃO JOÃO DO PIAUÍ !
!-------------------------------------------!

! PERDA DUPLA

! CIRCUITO 1

SLRGSJ1  = TLINE(5435,5570,3,STATUS)                                                                                
SLRGSJ1N = NOT(SLRGSJ1)

SCRGSJ1  = SERCAP(5436,5435,3,STATUS)                                                                                
SCRGSJ1N = NOT(SCRGSJ1)

! CIRCUITO 2

SLRGSJ2  = TLINE(5576,5570,4,STATUS)    
SLRGSJ2N = NOT(SLRGSJ2)

SCRGSJ2  = SERCAP(5436,5576,4,STATUS)    
SCRGSJ2N = NOT(SCRGSJ2)

PDL_RGSJ = AND(SLRGSJ1N,SLRGSJ2N)
PDC_RGSJ = AND(SCRGSJ1N,SCRGSJ2N)
PD_RGSJ  = OR(PDL_RGSJ,PDC_RGSJ)

!-------------------------------------------!
! IDENTIFICAÇÃO DE AO MENOS UMA PERDA DUPLA !
!-------------------------------------------!

PDUPLA   = OR(PD_CORG,PD_RGSJ)

!--------------------!
! CONDIÇÕES DE FLUXO !
!--------------------!

CFCORG   = GE(FCORG,P1400)
CFCOMC   = GT(FCOMC,P100)

!-----------------------!
! CONDIÇÃO PARA ATUAÇÃO !
!-----------------------!

CONDL11J = AND(PDUPLA,CFCORG,CFCOMC)

!---------------------------------!
! CORTE DE MÁQUINA NA UHE TUCURUÍ !
!---------------------------------!

TUCSHD   = GENSHED(CONDL11J,6419,10,4,0.250)       

!----------------------------------!
! RUN-UP NOS BIPOLOS XG-ET E XG-TR !
!----------------------------------!

B1P1     = DCPCHANG(CONDL11J,8100,3010,1,250,0.200)
B1P2     = DCPCHANG(CONDL11J,8100,3010,2,250,0.200)
B2P1     = DCPCHANG(CONDL11J,8100,9605,3,250,0.200)
B2P2     = DCPCHANG(CONDL11J,8100,9605,4,250,0.200)

END